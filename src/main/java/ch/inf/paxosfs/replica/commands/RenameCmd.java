/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ch.inf.paxosfs.replica.commands;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RenameCmd implements org.apache.thrift.TBase<RenameCmd, RenameCmd._Fields>, java.io.Serializable, Cloneable, Comparable<RenameCmd> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RenameCmd");

  private static final org.apache.thrift.protocol.TField FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("from", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PARENT_PARTITION_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("parentPartitionFrom", org.apache.thrift.protocol.TType.SET, (short)7);
  private static final org.apache.thrift.protocol.TField PARTITION_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionFrom", org.apache.thrift.protocol.TType.SET, (short)8);
  private static final org.apache.thrift.protocol.TField PARENT_PARTITION_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("parentPartitionTo", org.apache.thrift.protocol.TType.SET, (short)9);
  private static final org.apache.thrift.protocol.TField PARTITION_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionTo", org.apache.thrift.protocol.TType.SET, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RenameCmdStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RenameCmdTupleSchemeFactory());
  }

  public String from; // required
  public String to; // required
  public Set<Byte> parentPartitionFrom; // required
  public Set<Byte> partitionFrom; // required
  public Set<Byte> parentPartitionTo; // required
  public Set<Byte> partitionTo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FROM((short)3, "from"),
    TO((short)4, "to"),
    PARENT_PARTITION_FROM((short)7, "parentPartitionFrom"),
    PARTITION_FROM((short)8, "partitionFrom"),
    PARENT_PARTITION_TO((short)9, "parentPartitionTo"),
    PARTITION_TO((short)10, "partitionTo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 3: // FROM
          return FROM;
        case 4: // TO
          return TO;
        case 7: // PARENT_PARTITION_FROM
          return PARENT_PARTITION_FROM;
        case 8: // PARTITION_FROM
          return PARTITION_FROM;
        case 9: // PARENT_PARTITION_TO
          return PARENT_PARTITION_TO;
        case 10: // PARTITION_TO
          return PARTITION_TO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM, new org.apache.thrift.meta_data.FieldMetaData("from", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_PARTITION_FROM, new org.apache.thrift.meta_data.FieldMetaData("parentPartitionFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.PARTITION_FROM, new org.apache.thrift.meta_data.FieldMetaData("partitionFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.PARENT_PARTITION_TO, new org.apache.thrift.meta_data.FieldMetaData("parentPartitionTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.PARTITION_TO, new org.apache.thrift.meta_data.FieldMetaData("partitionTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RenameCmd.class, metaDataMap);
  }

  public RenameCmd() {
  }

  public RenameCmd(
    String from,
    String to,
    Set<Byte> parentPartitionFrom,
    Set<Byte> partitionFrom,
    Set<Byte> parentPartitionTo,
    Set<Byte> partitionTo)
  {
    this();
    this.from = from;
    this.to = to;
    this.parentPartitionFrom = parentPartitionFrom;
    this.partitionFrom = partitionFrom;
    this.parentPartitionTo = parentPartitionTo;
    this.partitionTo = partitionTo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RenameCmd(RenameCmd other) {
    if (other.isSetFrom()) {
      this.from = other.from;
    }
    if (other.isSetTo()) {
      this.to = other.to;
    }
    if (other.isSetParentPartitionFrom()) {
      Set<Byte> __this__parentPartitionFrom = new HashSet<Byte>(other.parentPartitionFrom);
      this.parentPartitionFrom = __this__parentPartitionFrom;
    }
    if (other.isSetPartitionFrom()) {
      Set<Byte> __this__partitionFrom = new HashSet<Byte>(other.partitionFrom);
      this.partitionFrom = __this__partitionFrom;
    }
    if (other.isSetParentPartitionTo()) {
      Set<Byte> __this__parentPartitionTo = new HashSet<Byte>(other.parentPartitionTo);
      this.parentPartitionTo = __this__parentPartitionTo;
    }
    if (other.isSetPartitionTo()) {
      Set<Byte> __this__partitionTo = new HashSet<Byte>(other.partitionTo);
      this.partitionTo = __this__partitionTo;
    }
  }

  public RenameCmd deepCopy() {
    return new RenameCmd(this);
  }

  @Override
  public void clear() {
    this.from = null;
    this.to = null;
    this.parentPartitionFrom = null;
    this.partitionFrom = null;
    this.parentPartitionTo = null;
    this.partitionTo = null;
  }

  public String getFrom() {
    return this.from;
  }

  public RenameCmd setFrom(String from) {
    this.from = from;
    return this;
  }

  public void unsetFrom() {
    this.from = null;
  }

  /** Returns true if field from is set (has been assigned a value) and false otherwise */
  public boolean isSetFrom() {
    return this.from != null;
  }

  public void setFromIsSet(boolean value) {
    if (!value) {
      this.from = null;
    }
  }

  public String getTo() {
    return this.to;
  }

  public RenameCmd setTo(String to) {
    this.to = to;
    return this;
  }

  public void unsetTo() {
    this.to = null;
  }

  /** Returns true if field to is set (has been assigned a value) and false otherwise */
  public boolean isSetTo() {
    return this.to != null;
  }

  public void setToIsSet(boolean value) {
    if (!value) {
      this.to = null;
    }
  }

  public int getParentPartitionFromSize() {
    return (this.parentPartitionFrom == null) ? 0 : this.parentPartitionFrom.size();
  }

  public java.util.Iterator<Byte> getParentPartitionFromIterator() {
    return (this.parentPartitionFrom == null) ? null : this.parentPartitionFrom.iterator();
  }

  public void addToParentPartitionFrom(byte elem) {
    if (this.parentPartitionFrom == null) {
      this.parentPartitionFrom = new HashSet<Byte>();
    }
    this.parentPartitionFrom.add(elem);
  }

  public Set<Byte> getParentPartitionFrom() {
    return this.parentPartitionFrom;
  }

  public RenameCmd setParentPartitionFrom(Set<Byte> parentPartitionFrom) {
    this.parentPartitionFrom = parentPartitionFrom;
    return this;
  }

  public void unsetParentPartitionFrom() {
    this.parentPartitionFrom = null;
  }

  /** Returns true if field parentPartitionFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetParentPartitionFrom() {
    return this.parentPartitionFrom != null;
  }

  public void setParentPartitionFromIsSet(boolean value) {
    if (!value) {
      this.parentPartitionFrom = null;
    }
  }

  public int getPartitionFromSize() {
    return (this.partitionFrom == null) ? 0 : this.partitionFrom.size();
  }

  public java.util.Iterator<Byte> getPartitionFromIterator() {
    return (this.partitionFrom == null) ? null : this.partitionFrom.iterator();
  }

  public void addToPartitionFrom(byte elem) {
    if (this.partitionFrom == null) {
      this.partitionFrom = new HashSet<Byte>();
    }
    this.partitionFrom.add(elem);
  }

  public Set<Byte> getPartitionFrom() {
    return this.partitionFrom;
  }

  public RenameCmd setPartitionFrom(Set<Byte> partitionFrom) {
    this.partitionFrom = partitionFrom;
    return this;
  }

  public void unsetPartitionFrom() {
    this.partitionFrom = null;
  }

  /** Returns true if field partitionFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionFrom() {
    return this.partitionFrom != null;
  }

  public void setPartitionFromIsSet(boolean value) {
    if (!value) {
      this.partitionFrom = null;
    }
  }

  public int getParentPartitionToSize() {
    return (this.parentPartitionTo == null) ? 0 : this.parentPartitionTo.size();
  }

  public java.util.Iterator<Byte> getParentPartitionToIterator() {
    return (this.parentPartitionTo == null) ? null : this.parentPartitionTo.iterator();
  }

  public void addToParentPartitionTo(byte elem) {
    if (this.parentPartitionTo == null) {
      this.parentPartitionTo = new HashSet<Byte>();
    }
    this.parentPartitionTo.add(elem);
  }

  public Set<Byte> getParentPartitionTo() {
    return this.parentPartitionTo;
  }

  public RenameCmd setParentPartitionTo(Set<Byte> parentPartitionTo) {
    this.parentPartitionTo = parentPartitionTo;
    return this;
  }

  public void unsetParentPartitionTo() {
    this.parentPartitionTo = null;
  }

  /** Returns true if field parentPartitionTo is set (has been assigned a value) and false otherwise */
  public boolean isSetParentPartitionTo() {
    return this.parentPartitionTo != null;
  }

  public void setParentPartitionToIsSet(boolean value) {
    if (!value) {
      this.parentPartitionTo = null;
    }
  }

  public int getPartitionToSize() {
    return (this.partitionTo == null) ? 0 : this.partitionTo.size();
  }

  public java.util.Iterator<Byte> getPartitionToIterator() {
    return (this.partitionTo == null) ? null : this.partitionTo.iterator();
  }

  public void addToPartitionTo(byte elem) {
    if (this.partitionTo == null) {
      this.partitionTo = new HashSet<Byte>();
    }
    this.partitionTo.add(elem);
  }

  public Set<Byte> getPartitionTo() {
    return this.partitionTo;
  }

  public RenameCmd setPartitionTo(Set<Byte> partitionTo) {
    this.partitionTo = partitionTo;
    return this;
  }

  public void unsetPartitionTo() {
    this.partitionTo = null;
  }

  /** Returns true if field partitionTo is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionTo() {
    return this.partitionTo != null;
  }

  public void setPartitionToIsSet(boolean value) {
    if (!value) {
      this.partitionTo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FROM:
      if (value == null) {
        unsetFrom();
      } else {
        setFrom((String)value);
      }
      break;

    case TO:
      if (value == null) {
        unsetTo();
      } else {
        setTo((String)value);
      }
      break;

    case PARENT_PARTITION_FROM:
      if (value == null) {
        unsetParentPartitionFrom();
      } else {
        setParentPartitionFrom((Set<Byte>)value);
      }
      break;

    case PARTITION_FROM:
      if (value == null) {
        unsetPartitionFrom();
      } else {
        setPartitionFrom((Set<Byte>)value);
      }
      break;

    case PARENT_PARTITION_TO:
      if (value == null) {
        unsetParentPartitionTo();
      } else {
        setParentPartitionTo((Set<Byte>)value);
      }
      break;

    case PARTITION_TO:
      if (value == null) {
        unsetPartitionTo();
      } else {
        setPartitionTo((Set<Byte>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM:
      return getFrom();

    case TO:
      return getTo();

    case PARENT_PARTITION_FROM:
      return getParentPartitionFrom();

    case PARTITION_FROM:
      return getPartitionFrom();

    case PARENT_PARTITION_TO:
      return getParentPartitionTo();

    case PARTITION_TO:
      return getPartitionTo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FROM:
      return isSetFrom();
    case TO:
      return isSetTo();
    case PARENT_PARTITION_FROM:
      return isSetParentPartitionFrom();
    case PARTITION_FROM:
      return isSetPartitionFrom();
    case PARENT_PARTITION_TO:
      return isSetParentPartitionTo();
    case PARTITION_TO:
      return isSetPartitionTo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RenameCmd)
      return this.equals((RenameCmd)that);
    return false;
  }

  public boolean equals(RenameCmd that) {
    if (that == null)
      return false;

    boolean this_present_from = true && this.isSetFrom();
    boolean that_present_from = true && that.isSetFrom();
    if (this_present_from || that_present_from) {
      if (!(this_present_from && that_present_from))
        return false;
      if (!this.from.equals(that.from))
        return false;
    }

    boolean this_present_to = true && this.isSetTo();
    boolean that_present_to = true && that.isSetTo();
    if (this_present_to || that_present_to) {
      if (!(this_present_to && that_present_to))
        return false;
      if (!this.to.equals(that.to))
        return false;
    }

    boolean this_present_parentPartitionFrom = true && this.isSetParentPartitionFrom();
    boolean that_present_parentPartitionFrom = true && that.isSetParentPartitionFrom();
    if (this_present_parentPartitionFrom || that_present_parentPartitionFrom) {
      if (!(this_present_parentPartitionFrom && that_present_parentPartitionFrom))
        return false;
      if (!this.parentPartitionFrom.equals(that.parentPartitionFrom))
        return false;
    }

    boolean this_present_partitionFrom = true && this.isSetPartitionFrom();
    boolean that_present_partitionFrom = true && that.isSetPartitionFrom();
    if (this_present_partitionFrom || that_present_partitionFrom) {
      if (!(this_present_partitionFrom && that_present_partitionFrom))
        return false;
      if (!this.partitionFrom.equals(that.partitionFrom))
        return false;
    }

    boolean this_present_parentPartitionTo = true && this.isSetParentPartitionTo();
    boolean that_present_parentPartitionTo = true && that.isSetParentPartitionTo();
    if (this_present_parentPartitionTo || that_present_parentPartitionTo) {
      if (!(this_present_parentPartitionTo && that_present_parentPartitionTo))
        return false;
      if (!this.parentPartitionTo.equals(that.parentPartitionTo))
        return false;
    }

    boolean this_present_partitionTo = true && this.isSetPartitionTo();
    boolean that_present_partitionTo = true && that.isSetPartitionTo();
    if (this_present_partitionTo || that_present_partitionTo) {
      if (!(this_present_partitionTo && that_present_partitionTo))
        return false;
      if (!this.partitionTo.equals(that.partitionTo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RenameCmd other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFrom()).compareTo(other.isSetFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from, other.from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTo()).compareTo(other.isSetTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, other.to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentPartitionFrom()).compareTo(other.isSetParentPartitionFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentPartitionFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentPartitionFrom, other.parentPartitionFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionFrom()).compareTo(other.isSetPartitionFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionFrom, other.partitionFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentPartitionTo()).compareTo(other.isSetParentPartitionTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentPartitionTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentPartitionTo, other.parentPartitionTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionTo()).compareTo(other.isSetPartitionTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionTo, other.partitionTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RenameCmd(");
    boolean first = true;

    sb.append("from:");
    if (this.from == null) {
      sb.append("null");
    } else {
      sb.append(this.from);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("to:");
    if (this.to == null) {
      sb.append("null");
    } else {
      sb.append(this.to);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentPartitionFrom:");
    if (this.parentPartitionFrom == null) {
      sb.append("null");
    } else {
      sb.append(this.parentPartitionFrom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partitionFrom:");
    if (this.partitionFrom == null) {
      sb.append("null");
    } else {
      sb.append(this.partitionFrom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentPartitionTo:");
    if (this.parentPartitionTo == null) {
      sb.append("null");
    } else {
      sb.append(this.parentPartitionTo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partitionTo:");
    if (this.partitionTo == null) {
      sb.append("null");
    } else {
      sb.append(this.partitionTo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RenameCmdStandardSchemeFactory implements SchemeFactory {
    public RenameCmdStandardScheme getScheme() {
      return new RenameCmdStandardScheme();
    }
  }

  private static class RenameCmdStandardScheme extends StandardScheme<RenameCmd> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RenameCmd struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 3: // FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.from = iprot.readString();
              struct.setFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.to = iprot.readString();
              struct.setToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARENT_PARTITION_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set96 = iprot.readSetBegin();
                struct.parentPartitionFrom = new HashSet<Byte>(2*_set96.size);
                for (int _i97 = 0; _i97 < _set96.size; ++_i97)
                {
                  byte _elem98;
                  _elem98 = iprot.readByte();
                  struct.parentPartitionFrom.add(_elem98);
                }
                iprot.readSetEnd();
              }
              struct.setParentPartitionFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARTITION_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set99 = iprot.readSetBegin();
                struct.partitionFrom = new HashSet<Byte>(2*_set99.size);
                for (int _i100 = 0; _i100 < _set99.size; ++_i100)
                {
                  byte _elem101;
                  _elem101 = iprot.readByte();
                  struct.partitionFrom.add(_elem101);
                }
                iprot.readSetEnd();
              }
              struct.setPartitionFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARENT_PARTITION_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set102 = iprot.readSetBegin();
                struct.parentPartitionTo = new HashSet<Byte>(2*_set102.size);
                for (int _i103 = 0; _i103 < _set102.size; ++_i103)
                {
                  byte _elem104;
                  _elem104 = iprot.readByte();
                  struct.parentPartitionTo.add(_elem104);
                }
                iprot.readSetEnd();
              }
              struct.setParentPartitionToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARTITION_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set105 = iprot.readSetBegin();
                struct.partitionTo = new HashSet<Byte>(2*_set105.size);
                for (int _i106 = 0; _i106 < _set105.size; ++_i106)
                {
                  byte _elem107;
                  _elem107 = iprot.readByte();
                  struct.partitionTo.add(_elem107);
                }
                iprot.readSetEnd();
              }
              struct.setPartitionToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RenameCmd struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.from != null) {
        oprot.writeFieldBegin(FROM_FIELD_DESC);
        oprot.writeString(struct.from);
        oprot.writeFieldEnd();
      }
      if (struct.to != null) {
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeString(struct.to);
        oprot.writeFieldEnd();
      }
      if (struct.parentPartitionFrom != null) {
        oprot.writeFieldBegin(PARENT_PARTITION_FROM_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, struct.parentPartitionFrom.size()));
          for (byte _iter108 : struct.parentPartitionFrom)
          {
            oprot.writeByte(_iter108);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.partitionFrom != null) {
        oprot.writeFieldBegin(PARTITION_FROM_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, struct.partitionFrom.size()));
          for (byte _iter109 : struct.partitionFrom)
          {
            oprot.writeByte(_iter109);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.parentPartitionTo != null) {
        oprot.writeFieldBegin(PARENT_PARTITION_TO_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, struct.parentPartitionTo.size()));
          for (byte _iter110 : struct.parentPartitionTo)
          {
            oprot.writeByte(_iter110);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.partitionTo != null) {
        oprot.writeFieldBegin(PARTITION_TO_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, struct.partitionTo.size()));
          for (byte _iter111 : struct.partitionTo)
          {
            oprot.writeByte(_iter111);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RenameCmdTupleSchemeFactory implements SchemeFactory {
    public RenameCmdTupleScheme getScheme() {
      return new RenameCmdTupleScheme();
    }
  }

  private static class RenameCmdTupleScheme extends TupleScheme<RenameCmd> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RenameCmd struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFrom()) {
        optionals.set(0);
      }
      if (struct.isSetTo()) {
        optionals.set(1);
      }
      if (struct.isSetParentPartitionFrom()) {
        optionals.set(2);
      }
      if (struct.isSetPartitionFrom()) {
        optionals.set(3);
      }
      if (struct.isSetParentPartitionTo()) {
        optionals.set(4);
      }
      if (struct.isSetPartitionTo()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetFrom()) {
        oprot.writeString(struct.from);
      }
      if (struct.isSetTo()) {
        oprot.writeString(struct.to);
      }
      if (struct.isSetParentPartitionFrom()) {
        {
          oprot.writeI32(struct.parentPartitionFrom.size());
          for (byte _iter112 : struct.parentPartitionFrom)
          {
            oprot.writeByte(_iter112);
          }
        }
      }
      if (struct.isSetPartitionFrom()) {
        {
          oprot.writeI32(struct.partitionFrom.size());
          for (byte _iter113 : struct.partitionFrom)
          {
            oprot.writeByte(_iter113);
          }
        }
      }
      if (struct.isSetParentPartitionTo()) {
        {
          oprot.writeI32(struct.parentPartitionTo.size());
          for (byte _iter114 : struct.parentPartitionTo)
          {
            oprot.writeByte(_iter114);
          }
        }
      }
      if (struct.isSetPartitionTo()) {
        {
          oprot.writeI32(struct.partitionTo.size());
          for (byte _iter115 : struct.partitionTo)
          {
            oprot.writeByte(_iter115);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RenameCmd struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.from = iprot.readString();
        struct.setFromIsSet(true);
      }
      if (incoming.get(1)) {
        struct.to = iprot.readString();
        struct.setToIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set116 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.parentPartitionFrom = new HashSet<Byte>(2*_set116.size);
          for (int _i117 = 0; _i117 < _set116.size; ++_i117)
          {
            byte _elem118;
            _elem118 = iprot.readByte();
            struct.parentPartitionFrom.add(_elem118);
          }
        }
        struct.setParentPartitionFromIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set119 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.partitionFrom = new HashSet<Byte>(2*_set119.size);
          for (int _i120 = 0; _i120 < _set119.size; ++_i120)
          {
            byte _elem121;
            _elem121 = iprot.readByte();
            struct.partitionFrom.add(_elem121);
          }
        }
        struct.setPartitionFromIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set122 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.parentPartitionTo = new HashSet<Byte>(2*_set122.size);
          for (int _i123 = 0; _i123 < _set122.size; ++_i123)
          {
            byte _elem124;
            _elem124 = iprot.readByte();
            struct.parentPartitionTo.add(_elem124);
          }
        }
        struct.setParentPartitionToIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set125 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.partitionTo = new HashSet<Byte>(2*_set125.size);
          for (int _i126 = 0; _i126 < _set125.size; ++_i126)
          {
            byte _elem127;
            _elem127 = iprot.readByte();
            struct.partitionTo.add(_elem127);
          }
        }
        struct.setPartitionToIsSet(true);
      }
    }
  }

}

