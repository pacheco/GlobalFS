/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ch.usi.paxosfs.rpc;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class StatFS implements org.apache.thrift.TBase<StatFS, StatFS._Fields>, java.io.Serializable, Cloneable, Comparable<StatFS> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatFS");

  private static final org.apache.thrift.protocol.TField BLOCK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("blockSize", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("blocks", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BLOCKS_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("blocksFree", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField BLOCKS_AVAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("blocksAvail", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("files", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FILES_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("filesFree", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NAMELEN_FIELD_DESC = new org.apache.thrift.protocol.TField("namelen", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatFSStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatFSTupleSchemeFactory());
  }

  public int blockSize; // required
  public int blocks; // required
  public int blocksFree; // required
  public int blocksAvail; // required
  public int files; // required
  public int filesFree; // required
  public int namelen; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BLOCK_SIZE((short)1, "blockSize"),
    BLOCKS((short)2, "blocks"),
    BLOCKS_FREE((short)3, "blocksFree"),
    BLOCKS_AVAIL((short)4, "blocksAvail"),
    FILES((short)5, "files"),
    FILES_FREE((short)6, "filesFree"),
    NAMELEN((short)7, "namelen");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BLOCK_SIZE
          return BLOCK_SIZE;
        case 2: // BLOCKS
          return BLOCKS;
        case 3: // BLOCKS_FREE
          return BLOCKS_FREE;
        case 4: // BLOCKS_AVAIL
          return BLOCKS_AVAIL;
        case 5: // FILES
          return FILES;
        case 6: // FILES_FREE
          return FILES_FREE;
        case 7: // NAMELEN
          return NAMELEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BLOCKSIZE_ISSET_ID = 0;
  private static final int __BLOCKS_ISSET_ID = 1;
  private static final int __BLOCKSFREE_ISSET_ID = 2;
  private static final int __BLOCKSAVAIL_ISSET_ID = 3;
  private static final int __FILES_ISSET_ID = 4;
  private static final int __FILESFREE_ISSET_ID = 5;
  private static final int __NAMELEN_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BLOCK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("blockSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BLOCKS, new org.apache.thrift.meta_data.FieldMetaData("blocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BLOCKS_FREE, new org.apache.thrift.meta_data.FieldMetaData("blocksFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BLOCKS_AVAIL, new org.apache.thrift.meta_data.FieldMetaData("blocksAvail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILES, new org.apache.thrift.meta_data.FieldMetaData("files", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILES_FREE, new org.apache.thrift.meta_data.FieldMetaData("filesFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAMELEN, new org.apache.thrift.meta_data.FieldMetaData("namelen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatFS.class, metaDataMap);
  }

  public StatFS() {
  }

  public StatFS(
    int blockSize,
    int blocks,
    int blocksFree,
    int blocksAvail,
    int files,
    int filesFree,
    int namelen)
  {
    this();
    this.blockSize = blockSize;
    setBlockSizeIsSet(true);
    this.blocks = blocks;
    setBlocksIsSet(true);
    this.blocksFree = blocksFree;
    setBlocksFreeIsSet(true);
    this.blocksAvail = blocksAvail;
    setBlocksAvailIsSet(true);
    this.files = files;
    setFilesIsSet(true);
    this.filesFree = filesFree;
    setFilesFreeIsSet(true);
    this.namelen = namelen;
    setNamelenIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatFS(StatFS other) {
    __isset_bitfield = other.__isset_bitfield;
    this.blockSize = other.blockSize;
    this.blocks = other.blocks;
    this.blocksFree = other.blocksFree;
    this.blocksAvail = other.blocksAvail;
    this.files = other.files;
    this.filesFree = other.filesFree;
    this.namelen = other.namelen;
  }

  public StatFS deepCopy() {
    return new StatFS(this);
  }

  @Override
  public void clear() {
    setBlockSizeIsSet(false);
    this.blockSize = 0;
    setBlocksIsSet(false);
    this.blocks = 0;
    setBlocksFreeIsSet(false);
    this.blocksFree = 0;
    setBlocksAvailIsSet(false);
    this.blocksAvail = 0;
    setFilesIsSet(false);
    this.files = 0;
    setFilesFreeIsSet(false);
    this.filesFree = 0;
    setNamelenIsSet(false);
    this.namelen = 0;
  }

  public int getBlockSize() {
    return this.blockSize;
  }

  public StatFS setBlockSize(int blockSize) {
    this.blockSize = blockSize;
    setBlockSizeIsSet(true);
    return this;
  }

  public void unsetBlockSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
  }

  /** Returns true if field blockSize is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockSize() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
  }

  public void setBlockSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID, value);
  }

  public int getBlocks() {
    return this.blocks;
  }

  public StatFS setBlocks(int blocks) {
    this.blocks = blocks;
    setBlocksIsSet(true);
    return this;
  }

  public void unsetBlocks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKS_ISSET_ID);
  }

  /** Returns true if field blocks is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocks() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKS_ISSET_ID);
  }

  public void setBlocksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKS_ISSET_ID, value);
  }

  public int getBlocksFree() {
    return this.blocksFree;
  }

  public StatFS setBlocksFree(int blocksFree) {
    this.blocksFree = blocksFree;
    setBlocksFreeIsSet(true);
    return this;
  }

  public void unsetBlocksFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKSFREE_ISSET_ID);
  }

  /** Returns true if field blocksFree is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocksFree() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKSFREE_ISSET_ID);
  }

  public void setBlocksFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKSFREE_ISSET_ID, value);
  }

  public int getBlocksAvail() {
    return this.blocksAvail;
  }

  public StatFS setBlocksAvail(int blocksAvail) {
    this.blocksAvail = blocksAvail;
    setBlocksAvailIsSet(true);
    return this;
  }

  public void unsetBlocksAvail() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKSAVAIL_ISSET_ID);
  }

  /** Returns true if field blocksAvail is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocksAvail() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKSAVAIL_ISSET_ID);
  }

  public void setBlocksAvailIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKSAVAIL_ISSET_ID, value);
  }

  public int getFiles() {
    return this.files;
  }

  public StatFS setFiles(int files) {
    this.files = files;
    setFilesIsSet(true);
    return this;
  }

  public void unsetFiles() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILES_ISSET_ID);
  }

  /** Returns true if field files is set (has been assigned a value) and false otherwise */
  public boolean isSetFiles() {
    return EncodingUtils.testBit(__isset_bitfield, __FILES_ISSET_ID);
  }

  public void setFilesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILES_ISSET_ID, value);
  }

  public int getFilesFree() {
    return this.filesFree;
  }

  public StatFS setFilesFree(int filesFree) {
    this.filesFree = filesFree;
    setFilesFreeIsSet(true);
    return this;
  }

  public void unsetFilesFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESFREE_ISSET_ID);
  }

  /** Returns true if field filesFree is set (has been assigned a value) and false otherwise */
  public boolean isSetFilesFree() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESFREE_ISSET_ID);
  }

  public void setFilesFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESFREE_ISSET_ID, value);
  }

  public int getNamelen() {
    return this.namelen;
  }

  public StatFS setNamelen(int namelen) {
    this.namelen = namelen;
    setNamelenIsSet(true);
    return this;
  }

  public void unsetNamelen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAMELEN_ISSET_ID);
  }

  /** Returns true if field namelen is set (has been assigned a value) and false otherwise */
  public boolean isSetNamelen() {
    return EncodingUtils.testBit(__isset_bitfield, __NAMELEN_ISSET_ID);
  }

  public void setNamelenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAMELEN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BLOCK_SIZE:
      if (value == null) {
        unsetBlockSize();
      } else {
        setBlockSize((Integer)value);
      }
      break;

    case BLOCKS:
      if (value == null) {
        unsetBlocks();
      } else {
        setBlocks((Integer)value);
      }
      break;

    case BLOCKS_FREE:
      if (value == null) {
        unsetBlocksFree();
      } else {
        setBlocksFree((Integer)value);
      }
      break;

    case BLOCKS_AVAIL:
      if (value == null) {
        unsetBlocksAvail();
      } else {
        setBlocksAvail((Integer)value);
      }
      break;

    case FILES:
      if (value == null) {
        unsetFiles();
      } else {
        setFiles((Integer)value);
      }
      break;

    case FILES_FREE:
      if (value == null) {
        unsetFilesFree();
      } else {
        setFilesFree((Integer)value);
      }
      break;

    case NAMELEN:
      if (value == null) {
        unsetNamelen();
      } else {
        setNamelen((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BLOCK_SIZE:
      return Integer.valueOf(getBlockSize());

    case BLOCKS:
      return Integer.valueOf(getBlocks());

    case BLOCKS_FREE:
      return Integer.valueOf(getBlocksFree());

    case BLOCKS_AVAIL:
      return Integer.valueOf(getBlocksAvail());

    case FILES:
      return Integer.valueOf(getFiles());

    case FILES_FREE:
      return Integer.valueOf(getFilesFree());

    case NAMELEN:
      return Integer.valueOf(getNamelen());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BLOCK_SIZE:
      return isSetBlockSize();
    case BLOCKS:
      return isSetBlocks();
    case BLOCKS_FREE:
      return isSetBlocksFree();
    case BLOCKS_AVAIL:
      return isSetBlocksAvail();
    case FILES:
      return isSetFiles();
    case FILES_FREE:
      return isSetFilesFree();
    case NAMELEN:
      return isSetNamelen();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatFS)
      return this.equals((StatFS)that);
    return false;
  }

  public boolean equals(StatFS that) {
    if (that == null)
      return false;

    boolean this_present_blockSize = true;
    boolean that_present_blockSize = true;
    if (this_present_blockSize || that_present_blockSize) {
      if (!(this_present_blockSize && that_present_blockSize))
        return false;
      if (this.blockSize != that.blockSize)
        return false;
    }

    boolean this_present_blocks = true;
    boolean that_present_blocks = true;
    if (this_present_blocks || that_present_blocks) {
      if (!(this_present_blocks && that_present_blocks))
        return false;
      if (this.blocks != that.blocks)
        return false;
    }

    boolean this_present_blocksFree = true;
    boolean that_present_blocksFree = true;
    if (this_present_blocksFree || that_present_blocksFree) {
      if (!(this_present_blocksFree && that_present_blocksFree))
        return false;
      if (this.blocksFree != that.blocksFree)
        return false;
    }

    boolean this_present_blocksAvail = true;
    boolean that_present_blocksAvail = true;
    if (this_present_blocksAvail || that_present_blocksAvail) {
      if (!(this_present_blocksAvail && that_present_blocksAvail))
        return false;
      if (this.blocksAvail != that.blocksAvail)
        return false;
    }

    boolean this_present_files = true;
    boolean that_present_files = true;
    if (this_present_files || that_present_files) {
      if (!(this_present_files && that_present_files))
        return false;
      if (this.files != that.files)
        return false;
    }

    boolean this_present_filesFree = true;
    boolean that_present_filesFree = true;
    if (this_present_filesFree || that_present_filesFree) {
      if (!(this_present_filesFree && that_present_filesFree))
        return false;
      if (this.filesFree != that.filesFree)
        return false;
    }

    boolean this_present_namelen = true;
    boolean that_present_namelen = true;
    if (this_present_namelen || that_present_namelen) {
      if (!(this_present_namelen && that_present_namelen))
        return false;
      if (this.namelen != that.namelen)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StatFS other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBlockSize()).compareTo(other.isSetBlockSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockSize, other.blockSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlocks()).compareTo(other.isSetBlocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocks, other.blocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlocksFree()).compareTo(other.isSetBlocksFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocksFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocksFree, other.blocksFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlocksAvail()).compareTo(other.isSetBlocksAvail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocksAvail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocksAvail, other.blocksAvail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFiles()).compareTo(other.isSetFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.files, other.files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilesFree()).compareTo(other.isSetFilesFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilesFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filesFree, other.filesFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNamelen()).compareTo(other.isSetNamelen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamelen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namelen, other.namelen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatFS(");
    boolean first = true;

    sb.append("blockSize:");
    sb.append(this.blockSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blocks:");
    sb.append(this.blocks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blocksFree:");
    sb.append(this.blocksFree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blocksAvail:");
    sb.append(this.blocksAvail);
    first = false;
    if (!first) sb.append(", ");
    sb.append("files:");
    sb.append(this.files);
    first = false;
    if (!first) sb.append(", ");
    sb.append("filesFree:");
    sb.append(this.filesFree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("namelen:");
    sb.append(this.namelen);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatFSStandardSchemeFactory implements SchemeFactory {
    public StatFSStandardScheme getScheme() {
      return new StatFSStandardScheme();
    }
  }

  private static class StatFSStandardScheme extends StandardScheme<StatFS> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatFS struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BLOCK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blockSize = iprot.readI32();
              struct.setBlockSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blocks = iprot.readI32();
              struct.setBlocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BLOCKS_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blocksFree = iprot.readI32();
              struct.setBlocksFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BLOCKS_AVAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blocksAvail = iprot.readI32();
              struct.setBlocksAvailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.files = iprot.readI32();
              struct.setFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILES_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.filesFree = iprot.readI32();
              struct.setFilesFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAMELEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.namelen = iprot.readI32();
              struct.setNamelenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatFS struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BLOCK_SIZE_FIELD_DESC);
      oprot.writeI32(struct.blockSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCKS_FIELD_DESC);
      oprot.writeI32(struct.blocks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCKS_FREE_FIELD_DESC);
      oprot.writeI32(struct.blocksFree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCKS_AVAIL_FIELD_DESC);
      oprot.writeI32(struct.blocksAvail);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILES_FIELD_DESC);
      oprot.writeI32(struct.files);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILES_FREE_FIELD_DESC);
      oprot.writeI32(struct.filesFree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NAMELEN_FIELD_DESC);
      oprot.writeI32(struct.namelen);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatFSTupleSchemeFactory implements SchemeFactory {
    public StatFSTupleScheme getScheme() {
      return new StatFSTupleScheme();
    }
  }

  private static class StatFSTupleScheme extends TupleScheme<StatFS> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatFS struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBlockSize()) {
        optionals.set(0);
      }
      if (struct.isSetBlocks()) {
        optionals.set(1);
      }
      if (struct.isSetBlocksFree()) {
        optionals.set(2);
      }
      if (struct.isSetBlocksAvail()) {
        optionals.set(3);
      }
      if (struct.isSetFiles()) {
        optionals.set(4);
      }
      if (struct.isSetFilesFree()) {
        optionals.set(5);
      }
      if (struct.isSetNamelen()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetBlockSize()) {
        oprot.writeI32(struct.blockSize);
      }
      if (struct.isSetBlocks()) {
        oprot.writeI32(struct.blocks);
      }
      if (struct.isSetBlocksFree()) {
        oprot.writeI32(struct.blocksFree);
      }
      if (struct.isSetBlocksAvail()) {
        oprot.writeI32(struct.blocksAvail);
      }
      if (struct.isSetFiles()) {
        oprot.writeI32(struct.files);
      }
      if (struct.isSetFilesFree()) {
        oprot.writeI32(struct.filesFree);
      }
      if (struct.isSetNamelen()) {
        oprot.writeI32(struct.namelen);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatFS struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.blockSize = iprot.readI32();
        struct.setBlockSizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.blocks = iprot.readI32();
        struct.setBlocksIsSet(true);
      }
      if (incoming.get(2)) {
        struct.blocksFree = iprot.readI32();
        struct.setBlocksFreeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.blocksAvail = iprot.readI32();
        struct.setBlocksAvailIsSet(true);
      }
      if (incoming.get(4)) {
        struct.files = iprot.readI32();
        struct.setFilesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.filesFree = iprot.readI32();
        struct.setFilesFreeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.namelen = iprot.readI32();
        struct.setNamelenIsSet(true);
      }
    }
  }

}

