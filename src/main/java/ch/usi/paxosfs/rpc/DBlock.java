/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ch.usi.paxosfs.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DBlock implements org.apache.thrift.TBase<DBlock, DBlock._Fields>, java.io.Serializable, Cloneable, Comparable<DBlock> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DBlock");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField START_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("startOffset", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField END_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("endOffset", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STORAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("storage", org.apache.thrift.protocol.TType.SET, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DBlockStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DBlockTupleSchemeFactory());
  }

  public ByteBuffer id; // required
  public int startOffset; // required
  public int endOffset; // required
  public Set<Byte> storage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    START_OFFSET((short)2, "startOffset"),
    END_OFFSET((short)3, "endOffset"),
    STORAGE((short)4, "storage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // START_OFFSET
          return START_OFFSET;
        case 3: // END_OFFSET
          return END_OFFSET;
        case 4: // STORAGE
          return STORAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTOFFSET_ISSET_ID = 0;
  private static final int __ENDOFFSET_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.START_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("startOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("endOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STORAGE, new org.apache.thrift.meta_data.FieldMetaData("storage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DBlock.class, metaDataMap);
  }

  public DBlock() {
  }

  public DBlock(
    ByteBuffer id,
    int startOffset,
    int endOffset,
    Set<Byte> storage)
  {
    this();
    this.id = id;
    this.startOffset = startOffset;
    setStartOffsetIsSet(true);
    this.endOffset = endOffset;
    setEndOffsetIsSet(true);
    this.storage = storage;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DBlock(DBlock other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = org.apache.thrift.TBaseHelper.copyBinary(other.id);
;
    }
    this.startOffset = other.startOffset;
    this.endOffset = other.endOffset;
    if (other.isSetStorage()) {
      Set<Byte> __this__storage = new HashSet<Byte>(other.storage);
      this.storage = __this__storage;
    }
  }

  public DBlock deepCopy() {
    return new DBlock(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setStartOffsetIsSet(false);
    this.startOffset = 0;
    setEndOffsetIsSet(false);
    this.endOffset = 0;
    this.storage = null;
  }

  public byte[] getId() {
    setId(org.apache.thrift.TBaseHelper.rightSize(id));
    return id == null ? null : id.array();
  }

  public ByteBuffer bufferForId() {
    return id;
  }

  public DBlock setId(byte[] id) {
    setId(id == null ? (ByteBuffer)null : ByteBuffer.wrap(id));
    return this;
  }

  public DBlock setId(ByteBuffer id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getStartOffset() {
    return this.startOffset;
  }

  public DBlock setStartOffset(int startOffset) {
    this.startOffset = startOffset;
    setStartOffsetIsSet(true);
    return this;
  }

  public void unsetStartOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTOFFSET_ISSET_ID);
  }

  /** Returns true if field startOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetStartOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTOFFSET_ISSET_ID);
  }

  public void setStartOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTOFFSET_ISSET_ID, value);
  }

  public int getEndOffset() {
    return this.endOffset;
  }

  public DBlock setEndOffset(int endOffset) {
    this.endOffset = endOffset;
    setEndOffsetIsSet(true);
    return this;
  }

  public void unsetEndOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDOFFSET_ISSET_ID);
  }

  /** Returns true if field endOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetEndOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDOFFSET_ISSET_ID);
  }

  public void setEndOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDOFFSET_ISSET_ID, value);
  }

  public int getStorageSize() {
    return (this.storage == null) ? 0 : this.storage.size();
  }

  public java.util.Iterator<Byte> getStorageIterator() {
    return (this.storage == null) ? null : this.storage.iterator();
  }

  public void addToStorage(byte elem) {
    if (this.storage == null) {
      this.storage = new HashSet<Byte>();
    }
    this.storage.add(elem);
  }

  public Set<Byte> getStorage() {
    return this.storage;
  }

  public DBlock setStorage(Set<Byte> storage) {
    this.storage = storage;
    return this;
  }

  public void unsetStorage() {
    this.storage = null;
  }

  /** Returns true if field storage is set (has been assigned a value) and false otherwise */
  public boolean isSetStorage() {
    return this.storage != null;
  }

  public void setStorageIsSet(boolean value) {
    if (!value) {
      this.storage = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ByteBuffer)value);
      }
      break;

    case START_OFFSET:
      if (value == null) {
        unsetStartOffset();
      } else {
        setStartOffset((Integer)value);
      }
      break;

    case END_OFFSET:
      if (value == null) {
        unsetEndOffset();
      } else {
        setEndOffset((Integer)value);
      }
      break;

    case STORAGE:
      if (value == null) {
        unsetStorage();
      } else {
        setStorage((Set<Byte>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case START_OFFSET:
      return Integer.valueOf(getStartOffset());

    case END_OFFSET:
      return Integer.valueOf(getEndOffset());

    case STORAGE:
      return getStorage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case START_OFFSET:
      return isSetStartOffset();
    case END_OFFSET:
      return isSetEndOffset();
    case STORAGE:
      return isSetStorage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DBlock)
      return this.equals((DBlock)that);
    return false;
  }

  public boolean equals(DBlock that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_startOffset = true;
    boolean that_present_startOffset = true;
    if (this_present_startOffset || that_present_startOffset) {
      if (!(this_present_startOffset && that_present_startOffset))
        return false;
      if (this.startOffset != that.startOffset)
        return false;
    }

    boolean this_present_endOffset = true;
    boolean that_present_endOffset = true;
    if (this_present_endOffset || that_present_endOffset) {
      if (!(this_present_endOffset && that_present_endOffset))
        return false;
      if (this.endOffset != that.endOffset)
        return false;
    }

    boolean this_present_storage = true && this.isSetStorage();
    boolean that_present_storage = true && that.isSetStorage();
    if (this_present_storage || that_present_storage) {
      if (!(this_present_storage && that_present_storage))
        return false;
      if (!this.storage.equals(that.storage))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DBlock other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartOffset()).compareTo(other.isSetStartOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startOffset, other.startOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndOffset()).compareTo(other.isSetEndOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endOffset, other.endOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStorage()).compareTo(other.isSetStorage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage, other.storage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DBlock(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.id, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startOffset:");
    sb.append(this.startOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endOffset:");
    sb.append(this.endOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("storage:");
    if (this.storage == null) {
      sb.append("null");
    } else {
      sb.append(this.storage);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DBlockStandardSchemeFactory implements SchemeFactory {
    public DBlockStandardScheme getScheme() {
      return new DBlockStandardScheme();
    }
  }

  private static class DBlockStandardScheme extends StandardScheme<DBlock> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DBlock struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readBinary();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startOffset = iprot.readI32();
              struct.setStartOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endOffset = iprot.readI32();
              struct.setEndOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STORAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.storage = new HashSet<Byte>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  byte _elem2;
                  _elem2 = iprot.readByte();
                  struct.storage.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setStorageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DBlock struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeBinary(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_OFFSET_FIELD_DESC);
      oprot.writeI32(struct.startOffset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_OFFSET_FIELD_DESC);
      oprot.writeI32(struct.endOffset);
      oprot.writeFieldEnd();
      if (struct.storage != null) {
        oprot.writeFieldBegin(STORAGE_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, struct.storage.size()));
          for (byte _iter3 : struct.storage)
          {
            oprot.writeByte(_iter3);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DBlockTupleSchemeFactory implements SchemeFactory {
    public DBlockTupleScheme getScheme() {
      return new DBlockTupleScheme();
    }
  }

  private static class DBlockTupleScheme extends TupleScheme<DBlock> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DBlock struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetStartOffset()) {
        optionals.set(1);
      }
      if (struct.isSetEndOffset()) {
        optionals.set(2);
      }
      if (struct.isSetStorage()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeBinary(struct.id);
      }
      if (struct.isSetStartOffset()) {
        oprot.writeI32(struct.startOffset);
      }
      if (struct.isSetEndOffset()) {
        oprot.writeI32(struct.endOffset);
      }
      if (struct.isSetStorage()) {
        {
          oprot.writeI32(struct.storage.size());
          for (byte _iter4 : struct.storage)
          {
            oprot.writeByte(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DBlock struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readBinary();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startOffset = iprot.readI32();
        struct.setStartOffsetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endOffset = iprot.readI32();
        struct.setEndOffsetIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.storage = new HashSet<Byte>(2*_set5.size);
          for (int _i6 = 0; _i6 < _set5.size; ++_i6)
          {
            byte _elem7;
            _elem7 = iprot.readByte();
            struct.storage.add(_elem7);
          }
        }
        struct.setStorageIsSet(true);
      }
    }
  }
  
  public long size() {
	  return this.getEndOffset() - this.getStartOffset();
  }
}

