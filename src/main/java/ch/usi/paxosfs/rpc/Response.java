/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ch.usi.paxosfs.rpc;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class Response implements org.apache.thrift.TBase<Response, Response._Fields>, java.io.Serializable, Cloneable, Comparable<Response> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response");

  private static final org.apache.thrift.protocol.TField INSTANCE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceMap", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField GETATTR_FIELD_DESC = new org.apache.thrift.protocol.TField("getattr", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField READLINK_FIELD_DESC = new org.apache.thrift.protocol.TField("readlink", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GETDIR_FIELD_DESC = new org.apache.thrift.protocol.TField("getdir", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField STATFS_FIELD_DESC = new org.apache.thrift.protocol.TField("statfs", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("open", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField READ_BLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("readBlocks", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponseTupleSchemeFactory());
  }

  public Map<Byte,Long> instanceMap; // required
  public Attr getattr; // optional
  public String readlink; // optional
  public List<DirEntry> getdir; // optional
  public FileSystemStats statfs; // optional
  public FileHandle open; // optional
  public ReadResult readBlocks; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTANCE_MAP((short)1, "instanceMap"),
    GETATTR((short)2, "getattr"),
    READLINK((short)3, "readlink"),
    GETDIR((short)4, "getdir"),
    STATFS((short)5, "statfs"),
    OPEN((short)6, "open"),
    READ_BLOCKS((short)7, "readBlocks");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTANCE_MAP
          return INSTANCE_MAP;
        case 2: // GETATTR
          return GETATTR;
        case 3: // READLINK
          return READLINK;
        case 4: // GETDIR
          return GETDIR;
        case 5: // STATFS
          return STATFS;
        case 6: // OPEN
          return OPEN;
        case 7: // READ_BLOCKS
          return READ_BLOCKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.GETATTR,_Fields.READLINK,_Fields.GETDIR,_Fields.STATFS,_Fields.OPEN,_Fields.READ_BLOCKS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTANCE_MAP, new org.apache.thrift.meta_data.FieldMetaData("instanceMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.GETATTR, new org.apache.thrift.meta_data.FieldMetaData("getattr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Attr.class)));
    tmpMap.put(_Fields.READLINK, new org.apache.thrift.meta_data.FieldMetaData("readlink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GETDIR, new org.apache.thrift.meta_data.FieldMetaData("getdir", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DirEntry.class))));
    tmpMap.put(_Fields.STATFS, new org.apache.thrift.meta_data.FieldMetaData("statfs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileSystemStats.class)));
    tmpMap.put(_Fields.OPEN, new org.apache.thrift.meta_data.FieldMetaData("open", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileHandle.class)));
    tmpMap.put(_Fields.READ_BLOCKS, new org.apache.thrift.meta_data.FieldMetaData("readBlocks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReadResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response.class, metaDataMap);
  }

  public Response() {
  }

  public Response(
    Map<Byte,Long> instanceMap)
  {
    this();
    this.instanceMap = instanceMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Response(Response other) {
    if (other.isSetInstanceMap()) {
      Map<Byte,Long> __this__instanceMap = new HashMap<Byte,Long>(other.instanceMap);
      this.instanceMap = __this__instanceMap;
    }
    if (other.isSetGetattr()) {
      this.getattr = new Attr(other.getattr);
    }
    if (other.isSetReadlink()) {
      this.readlink = other.readlink;
    }
    if (other.isSetGetdir()) {
      List<DirEntry> __this__getdir = new ArrayList<DirEntry>(other.getdir.size());
      for (DirEntry other_element : other.getdir) {
        __this__getdir.add(new DirEntry(other_element));
      }
      this.getdir = __this__getdir;
    }
    if (other.isSetStatfs()) {
      this.statfs = new FileSystemStats(other.statfs);
    }
    if (other.isSetOpen()) {
      this.open = new FileHandle(other.open);
    }
    if (other.isSetReadBlocks()) {
      this.readBlocks = new ReadResult(other.readBlocks);
    }
  }

  public Response deepCopy() {
    return new Response(this);
  }

  @Override
  public void clear() {
    this.instanceMap = null;
    this.getattr = null;
    this.readlink = null;
    this.getdir = null;
    this.statfs = null;
    this.open = null;
    this.readBlocks = null;
  }

  public int getInstanceMapSize() {
    return (this.instanceMap == null) ? 0 : this.instanceMap.size();
  }

  public void putToInstanceMap(byte key, long val) {
    if (this.instanceMap == null) {
      this.instanceMap = new HashMap<Byte,Long>();
    }
    this.instanceMap.put(key, val);
  }

  public Map<Byte,Long> getInstanceMap() {
    return this.instanceMap;
  }

  public Response setInstanceMap(Map<Byte,Long> instanceMap) {
    this.instanceMap = instanceMap;
    return this;
  }

  public void unsetInstanceMap() {
    this.instanceMap = null;
  }

  /** Returns true if field instanceMap is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceMap() {
    return this.instanceMap != null;
  }

  public void setInstanceMapIsSet(boolean value) {
    if (!value) {
      this.instanceMap = null;
    }
  }

  public Attr getGetattr() {
    return this.getattr;
  }

  public Response setGetattr(Attr getattr) {
    this.getattr = getattr;
    return this;
  }

  public void unsetGetattr() {
    this.getattr = null;
  }

  /** Returns true if field getattr is set (has been assigned a value) and false otherwise */
  public boolean isSetGetattr() {
    return this.getattr != null;
  }

  public void setGetattrIsSet(boolean value) {
    if (!value) {
      this.getattr = null;
    }
  }

  public String getReadlink() {
    return this.readlink;
  }

  public Response setReadlink(String readlink) {
    this.readlink = readlink;
    return this;
  }

  public void unsetReadlink() {
    this.readlink = null;
  }

  /** Returns true if field readlink is set (has been assigned a value) and false otherwise */
  public boolean isSetReadlink() {
    return this.readlink != null;
  }

  public void setReadlinkIsSet(boolean value) {
    if (!value) {
      this.readlink = null;
    }
  }

  public int getGetdirSize() {
    return (this.getdir == null) ? 0 : this.getdir.size();
  }

  public java.util.Iterator<DirEntry> getGetdirIterator() {
    return (this.getdir == null) ? null : this.getdir.iterator();
  }

  public void addToGetdir(DirEntry elem) {
    if (this.getdir == null) {
      this.getdir = new ArrayList<DirEntry>();
    }
    this.getdir.add(elem);
  }

  public List<DirEntry> getGetdir() {
    return this.getdir;
  }

  public Response setGetdir(List<DirEntry> getdir) {
    this.getdir = getdir;
    return this;
  }

  public void unsetGetdir() {
    this.getdir = null;
  }

  /** Returns true if field getdir is set (has been assigned a value) and false otherwise */
  public boolean isSetGetdir() {
    return this.getdir != null;
  }

  public void setGetdirIsSet(boolean value) {
    if (!value) {
      this.getdir = null;
    }
  }

  public FileSystemStats getStatfs() {
    return this.statfs;
  }

  public Response setStatfs(FileSystemStats statfs) {
    this.statfs = statfs;
    return this;
  }

  public void unsetStatfs() {
    this.statfs = null;
  }

  /** Returns true if field statfs is set (has been assigned a value) and false otherwise */
  public boolean isSetStatfs() {
    return this.statfs != null;
  }

  public void setStatfsIsSet(boolean value) {
    if (!value) {
      this.statfs = null;
    }
  }

  public FileHandle getOpen() {
    return this.open;
  }

  public Response setOpen(FileHandle open) {
    this.open = open;
    return this;
  }

  public void unsetOpen() {
    this.open = null;
  }

  /** Returns true if field open is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen() {
    return this.open != null;
  }

  public void setOpenIsSet(boolean value) {
    if (!value) {
      this.open = null;
    }
  }

  public ReadResult getReadBlocks() {
    return this.readBlocks;
  }

  public Response setReadBlocks(ReadResult readBlocks) {
    this.readBlocks = readBlocks;
    return this;
  }

  public void unsetReadBlocks() {
    this.readBlocks = null;
  }

  /** Returns true if field readBlocks is set (has been assigned a value) and false otherwise */
  public boolean isSetReadBlocks() {
    return this.readBlocks != null;
  }

  public void setReadBlocksIsSet(boolean value) {
    if (!value) {
      this.readBlocks = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTANCE_MAP:
      if (value == null) {
        unsetInstanceMap();
      } else {
        setInstanceMap((Map<Byte,Long>)value);
      }
      break;

    case GETATTR:
      if (value == null) {
        unsetGetattr();
      } else {
        setGetattr((Attr)value);
      }
      break;

    case READLINK:
      if (value == null) {
        unsetReadlink();
      } else {
        setReadlink((String)value);
      }
      break;

    case GETDIR:
      if (value == null) {
        unsetGetdir();
      } else {
        setGetdir((List<DirEntry>)value);
      }
      break;

    case STATFS:
      if (value == null) {
        unsetStatfs();
      } else {
        setStatfs((FileSystemStats)value);
      }
      break;

    case OPEN:
      if (value == null) {
        unsetOpen();
      } else {
        setOpen((FileHandle)value);
      }
      break;

    case READ_BLOCKS:
      if (value == null) {
        unsetReadBlocks();
      } else {
        setReadBlocks((ReadResult)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTANCE_MAP:
      return getInstanceMap();

    case GETATTR:
      return getGetattr();

    case READLINK:
      return getReadlink();

    case GETDIR:
      return getGetdir();

    case STATFS:
      return getStatfs();

    case OPEN:
      return getOpen();

    case READ_BLOCKS:
      return getReadBlocks();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTANCE_MAP:
      return isSetInstanceMap();
    case GETATTR:
      return isSetGetattr();
    case READLINK:
      return isSetReadlink();
    case GETDIR:
      return isSetGetdir();
    case STATFS:
      return isSetStatfs();
    case OPEN:
      return isSetOpen();
    case READ_BLOCKS:
      return isSetReadBlocks();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Response)
      return this.equals((Response)that);
    return false;
  }

  public boolean equals(Response that) {
    if (that == null)
      return false;

    boolean this_present_instanceMap = true && this.isSetInstanceMap();
    boolean that_present_instanceMap = true && that.isSetInstanceMap();
    if (this_present_instanceMap || that_present_instanceMap) {
      if (!(this_present_instanceMap && that_present_instanceMap))
        return false;
      if (!this.instanceMap.equals(that.instanceMap))
        return false;
    }

    boolean this_present_getattr = true && this.isSetGetattr();
    boolean that_present_getattr = true && that.isSetGetattr();
    if (this_present_getattr || that_present_getattr) {
      if (!(this_present_getattr && that_present_getattr))
        return false;
      if (!this.getattr.equals(that.getattr))
        return false;
    }

    boolean this_present_readlink = true && this.isSetReadlink();
    boolean that_present_readlink = true && that.isSetReadlink();
    if (this_present_readlink || that_present_readlink) {
      if (!(this_present_readlink && that_present_readlink))
        return false;
      if (!this.readlink.equals(that.readlink))
        return false;
    }

    boolean this_present_getdir = true && this.isSetGetdir();
    boolean that_present_getdir = true && that.isSetGetdir();
    if (this_present_getdir || that_present_getdir) {
      if (!(this_present_getdir && that_present_getdir))
        return false;
      if (!this.getdir.equals(that.getdir))
        return false;
    }

    boolean this_present_statfs = true && this.isSetStatfs();
    boolean that_present_statfs = true && that.isSetStatfs();
    if (this_present_statfs || that_present_statfs) {
      if (!(this_present_statfs && that_present_statfs))
        return false;
      if (!this.statfs.equals(that.statfs))
        return false;
    }

    boolean this_present_open = true && this.isSetOpen();
    boolean that_present_open = true && that.isSetOpen();
    if (this_present_open || that_present_open) {
      if (!(this_present_open && that_present_open))
        return false;
      if (!this.open.equals(that.open))
        return false;
    }

    boolean this_present_readBlocks = true && this.isSetReadBlocks();
    boolean that_present_readBlocks = true && that.isSetReadBlocks();
    if (this_present_readBlocks || that_present_readBlocks) {
      if (!(this_present_readBlocks && that_present_readBlocks))
        return false;
      if (!this.readBlocks.equals(that.readBlocks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Response other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstanceMap()).compareTo(other.isSetInstanceMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceMap, other.instanceMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGetattr()).compareTo(other.isSetGetattr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetattr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getattr, other.getattr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadlink()).compareTo(other.isSetReadlink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadlink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readlink, other.readlink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGetdir()).compareTo(other.isSetGetdir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetdir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getdir, other.getdir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatfs()).compareTo(other.isSetStatfs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatfs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statfs, other.statfs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpen()).compareTo(other.isSetOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open, other.open);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadBlocks()).compareTo(other.isSetReadBlocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadBlocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readBlocks, other.readBlocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Response(");
    boolean first = true;

    sb.append("instanceMap:");
    if (this.instanceMap == null) {
      sb.append("null");
    } else {
      sb.append(this.instanceMap);
    }
    first = false;
    if (isSetGetattr()) {
      if (!first) sb.append(", ");
      sb.append("getattr:");
      if (this.getattr == null) {
        sb.append("null");
      } else {
        sb.append(this.getattr);
      }
      first = false;
    }
    if (isSetReadlink()) {
      if (!first) sb.append(", ");
      sb.append("readlink:");
      if (this.readlink == null) {
        sb.append("null");
      } else {
        sb.append(this.readlink);
      }
      first = false;
    }
    if (isSetGetdir()) {
      if (!first) sb.append(", ");
      sb.append("getdir:");
      if (this.getdir == null) {
        sb.append("null");
      } else {
        sb.append(this.getdir);
      }
      first = false;
    }
    if (isSetStatfs()) {
      if (!first) sb.append(", ");
      sb.append("statfs:");
      if (this.statfs == null) {
        sb.append("null");
      } else {
        sb.append(this.statfs);
      }
      first = false;
    }
    if (isSetOpen()) {
      if (!first) sb.append(", ");
      sb.append("open:");
      if (this.open == null) {
        sb.append("null");
      } else {
        sb.append(this.open);
      }
      first = false;
    }
    if (isSetReadBlocks()) {
      if (!first) sb.append(", ");
      sb.append("readBlocks:");
      if (this.readBlocks == null) {
        sb.append("null");
      } else {
        sb.append(this.readBlocks);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (getattr != null) {
      getattr.validate();
    }
    if (statfs != null) {
      statfs.validate();
    }
    if (open != null) {
      open.validate();
    }
    if (readBlocks != null) {
      readBlocks.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseStandardSchemeFactory implements SchemeFactory {
    public ResponseStandardScheme getScheme() {
      return new ResponseStandardScheme();
    }
  }

  private static class ResponseStandardScheme extends StandardScheme<Response> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Response struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTANCE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.instanceMap = new HashMap<Byte,Long>(2*_map16.size);
                for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                {
                  byte _key18;
                  long _val19;
                  _key18 = iprot.readByte();
                  _val19 = iprot.readI64();
                  struct.instanceMap.put(_key18, _val19);
                }
                iprot.readMapEnd();
              }
              struct.setInstanceMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GETATTR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.getattr = new Attr();
              struct.getattr.read(iprot);
              struct.setGetattrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // READLINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.readlink = iprot.readString();
              struct.setReadlinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GETDIR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.getdir = new ArrayList<DirEntry>(_list20.size);
                for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                {
                  DirEntry _elem22;
                  _elem22 = new DirEntry();
                  _elem22.read(iprot);
                  struct.getdir.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setGetdirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATFS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.statfs = new FileSystemStats();
              struct.statfs.read(iprot);
              struct.setStatfsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.open = new FileHandle();
              struct.open.read(iprot);
              struct.setOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // READ_BLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.readBlocks = new ReadResult();
              struct.readBlocks.read(iprot);
              struct.setReadBlocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Response struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instanceMap != null) {
        oprot.writeFieldBegin(INSTANCE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I64, struct.instanceMap.size()));
          for (Map.Entry<Byte, Long> _iter23 : struct.instanceMap.entrySet())
          {
            oprot.writeByte(_iter23.getKey());
            oprot.writeI64(_iter23.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.getattr != null) {
        if (struct.isSetGetattr()) {
          oprot.writeFieldBegin(GETATTR_FIELD_DESC);
          struct.getattr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.readlink != null) {
        if (struct.isSetReadlink()) {
          oprot.writeFieldBegin(READLINK_FIELD_DESC);
          oprot.writeString(struct.readlink);
          oprot.writeFieldEnd();
        }
      }
      if (struct.getdir != null) {
        if (struct.isSetGetdir()) {
          oprot.writeFieldBegin(GETDIR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.getdir.size()));
            for (DirEntry _iter24 : struct.getdir)
            {
              _iter24.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.statfs != null) {
        if (struct.isSetStatfs()) {
          oprot.writeFieldBegin(STATFS_FIELD_DESC);
          struct.statfs.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.open != null) {
        if (struct.isSetOpen()) {
          oprot.writeFieldBegin(OPEN_FIELD_DESC);
          struct.open.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.readBlocks != null) {
        if (struct.isSetReadBlocks()) {
          oprot.writeFieldBegin(READ_BLOCKS_FIELD_DESC);
          struct.readBlocks.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseTupleSchemeFactory implements SchemeFactory {
    public ResponseTupleScheme getScheme() {
      return new ResponseTupleScheme();
    }
  }

  private static class ResponseTupleScheme extends TupleScheme<Response> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Response struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstanceMap()) {
        optionals.set(0);
      }
      if (struct.isSetGetattr()) {
        optionals.set(1);
      }
      if (struct.isSetReadlink()) {
        optionals.set(2);
      }
      if (struct.isSetGetdir()) {
        optionals.set(3);
      }
      if (struct.isSetStatfs()) {
        optionals.set(4);
      }
      if (struct.isSetOpen()) {
        optionals.set(5);
      }
      if (struct.isSetReadBlocks()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetInstanceMap()) {
        {
          oprot.writeI32(struct.instanceMap.size());
          for (Map.Entry<Byte, Long> _iter25 : struct.instanceMap.entrySet())
          {
            oprot.writeByte(_iter25.getKey());
            oprot.writeI64(_iter25.getValue());
          }
        }
      }
      if (struct.isSetGetattr()) {
        struct.getattr.write(oprot);
      }
      if (struct.isSetReadlink()) {
        oprot.writeString(struct.readlink);
      }
      if (struct.isSetGetdir()) {
        {
          oprot.writeI32(struct.getdir.size());
          for (DirEntry _iter26 : struct.getdir)
          {
            _iter26.write(oprot);
          }
        }
      }
      if (struct.isSetStatfs()) {
        struct.statfs.write(oprot);
      }
      if (struct.isSetOpen()) {
        struct.open.write(oprot);
      }
      if (struct.isSetReadBlocks()) {
        struct.readBlocks.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Response struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.instanceMap = new HashMap<Byte,Long>(2*_map27.size);
          for (int _i28 = 0; _i28 < _map27.size; ++_i28)
          {
            byte _key29;
            long _val30;
            _key29 = iprot.readByte();
            _val30 = iprot.readI64();
            struct.instanceMap.put(_key29, _val30);
          }
        }
        struct.setInstanceMapIsSet(true);
      }
      if (incoming.get(1)) {
        struct.getattr = new Attr();
        struct.getattr.read(iprot);
        struct.setGetattrIsSet(true);
      }
      if (incoming.get(2)) {
        struct.readlink = iprot.readString();
        struct.setReadlinkIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.getdir = new ArrayList<DirEntry>(_list31.size);
          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
          {
            DirEntry _elem33;
            _elem33 = new DirEntry();
            _elem33.read(iprot);
            struct.getdir.add(_elem33);
          }
        }
        struct.setGetdirIsSet(true);
      }
      if (incoming.get(4)) {
        struct.statfs = new FileSystemStats();
        struct.statfs.read(iprot);
        struct.setStatfsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.open = new FileHandle();
        struct.open.read(iprot);
        struct.setOpenIsSet(true);
      }
      if (incoming.get(6)) {
        struct.readBlocks = new ReadResult();
        struct.readBlocks.read(iprot);
        struct.setReadBlocksIsSet(true);
      }
    }
  }

}

