/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ch.usi.paxosfs.replica.commands;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Command implements org.apache.thrift.TBase<Command, Command._Fields>, java.io.Serializable, Cloneable, Comparable<Command> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Command");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REQ_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("reqTime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField GETDIR_FIELD_DESC = new org.apache.thrift.protocol.TField("getdir", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ATTR_FIELD_DESC = new org.apache.thrift.protocol.TField("attr", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField MKNOD_FIELD_DESC = new org.apache.thrift.protocol.TField("mknod", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField MKDIR_FIELD_DESC = new org.apache.thrift.protocol.TField("mkdir", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField UNLINK_FIELD_DESC = new org.apache.thrift.protocol.TField("unlink", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField RMDIR_FIELD_DESC = new org.apache.thrift.protocol.TField("rmdir", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField SYMLINK_FIELD_DESC = new org.apache.thrift.protocol.TField("symlink", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField RENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("rename", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField CHMOD_FIELD_DESC = new org.apache.thrift.protocol.TField("chmod", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField CHOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("chown", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField TRUNCATE_FIELD_DESC = new org.apache.thrift.protocol.TField("truncate", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField UTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("utime", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("open", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField READ_FIELD_DESC = new org.apache.thrift.protocol.TField("read", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField WRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("write", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField RELEASE_FIELD_DESC = new org.apache.thrift.protocol.TField("release", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField STATFS_FIELD_DESC = new org.apache.thrift.protocol.TField("statfs", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField SIGNAL_FIELD_DESC = new org.apache.thrift.protocol.TField("signal", org.apache.thrift.protocol.TType.STRUCT, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommandStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommandTupleSchemeFactory());
  }

  public int type; // required
  public long reqId; // required
  public int reqTime; // required
  public GetdirCmd getdir; // optional
  public AttrCmd attr; // optional
  public MknodCmd mknod; // optional
  public MkdirCmd mkdir; // optional
  public UnlinkCmd unlink; // optional
  public RmdirCmd rmdir; // optional
  public SymlinkCmd symlink; // optional
  public RenameCmd rename; // optional
  public ChmodCmd chmod; // optional
  public ChownCmd chown; // optional
  public TruncateCmd truncate; // optional
  public UtimeCmd utime; // optional
  public OpenCmd open; // optional
  public ReadBlocksCmd read; // optional
  public WriteBlocksCmd write; // optional
  public ReleaseCmd release; // optional
  public StatFsCmd statfs; // optional
  public Signal signal; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    REQ_ID((short)2, "reqId"),
    REQ_TIME((short)3, "reqTime"),
    GETDIR((short)4, "getdir"),
    ATTR((short)5, "attr"),
    MKNOD((short)7, "mknod"),
    MKDIR((short)8, "mkdir"),
    UNLINK((short)9, "unlink"),
    RMDIR((short)10, "rmdir"),
    SYMLINK((short)11, "symlink"),
    RENAME((short)12, "rename"),
    CHMOD((short)13, "chmod"),
    CHOWN((short)14, "chown"),
    TRUNCATE((short)15, "truncate"),
    UTIME((short)16, "utime"),
    OPEN((short)17, "open"),
    READ((short)18, "read"),
    WRITE((short)19, "write"),
    RELEASE((short)20, "release"),
    STATFS((short)21, "statfs"),
    SIGNAL((short)22, "signal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // REQ_ID
          return REQ_ID;
        case 3: // REQ_TIME
          return REQ_TIME;
        case 4: // GETDIR
          return GETDIR;
        case 5: // ATTR
          return ATTR;
        case 7: // MKNOD
          return MKNOD;
        case 8: // MKDIR
          return MKDIR;
        case 9: // UNLINK
          return UNLINK;
        case 10: // RMDIR
          return RMDIR;
        case 11: // SYMLINK
          return SYMLINK;
        case 12: // RENAME
          return RENAME;
        case 13: // CHMOD
          return CHMOD;
        case 14: // CHOWN
          return CHOWN;
        case 15: // TRUNCATE
          return TRUNCATE;
        case 16: // UTIME
          return UTIME;
        case 17: // OPEN
          return OPEN;
        case 18: // READ
          return READ;
        case 19: // WRITE
          return WRITE;
        case 20: // RELEASE
          return RELEASE;
        case 21: // STATFS
          return STATFS;
        case 22: // SIGNAL
          return SIGNAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __REQID_ISSET_ID = 1;
  private static final int __REQTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.GETDIR,_Fields.ATTR,_Fields.MKNOD,_Fields.MKDIR,_Fields.UNLINK,_Fields.RMDIR,_Fields.SYMLINK,_Fields.RENAME,_Fields.CHMOD,_Fields.CHOWN,_Fields.TRUNCATE,_Fields.UTIME,_Fields.OPEN,_Fields.READ,_Fields.WRITE,_Fields.RELEASE,_Fields.STATFS,_Fields.SIGNAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQ_TIME, new org.apache.thrift.meta_data.FieldMetaData("reqTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GETDIR, new org.apache.thrift.meta_data.FieldMetaData("getdir", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetdirCmd.class)));
    tmpMap.put(_Fields.ATTR, new org.apache.thrift.meta_data.FieldMetaData("attr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AttrCmd.class)));
    tmpMap.put(_Fields.MKNOD, new org.apache.thrift.meta_data.FieldMetaData("mknod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MknodCmd.class)));
    tmpMap.put(_Fields.MKDIR, new org.apache.thrift.meta_data.FieldMetaData("mkdir", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MkdirCmd.class)));
    tmpMap.put(_Fields.UNLINK, new org.apache.thrift.meta_data.FieldMetaData("unlink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnlinkCmd.class)));
    tmpMap.put(_Fields.RMDIR, new org.apache.thrift.meta_data.FieldMetaData("rmdir", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RmdirCmd.class)));
    tmpMap.put(_Fields.SYMLINK, new org.apache.thrift.meta_data.FieldMetaData("symlink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SymlinkCmd.class)));
    tmpMap.put(_Fields.RENAME, new org.apache.thrift.meta_data.FieldMetaData("rename", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RenameCmd.class)));
    tmpMap.put(_Fields.CHMOD, new org.apache.thrift.meta_data.FieldMetaData("chmod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChmodCmd.class)));
    tmpMap.put(_Fields.CHOWN, new org.apache.thrift.meta_data.FieldMetaData("chown", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChownCmd.class)));
    tmpMap.put(_Fields.TRUNCATE, new org.apache.thrift.meta_data.FieldMetaData("truncate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TruncateCmd.class)));
    tmpMap.put(_Fields.UTIME, new org.apache.thrift.meta_data.FieldMetaData("utime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UtimeCmd.class)));
    tmpMap.put(_Fields.OPEN, new org.apache.thrift.meta_data.FieldMetaData("open", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OpenCmd.class)));
    tmpMap.put(_Fields.READ, new org.apache.thrift.meta_data.FieldMetaData("read", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReadBlocksCmd.class)));
    tmpMap.put(_Fields.WRITE, new org.apache.thrift.meta_data.FieldMetaData("write", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WriteBlocksCmd.class)));
    tmpMap.put(_Fields.RELEASE, new org.apache.thrift.meta_data.FieldMetaData("release", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReleaseCmd.class)));
    tmpMap.put(_Fields.STATFS, new org.apache.thrift.meta_data.FieldMetaData("statfs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatFsCmd.class)));
    tmpMap.put(_Fields.SIGNAL, new org.apache.thrift.meta_data.FieldMetaData("signal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Signal.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Command.class, metaDataMap);
  }

  public Command() {
  }

  public Command(
    int type,
    long reqId,
    int reqTime)
  {
    this();
    this.type = type;
    setTypeIsSet(true);
    this.reqId = reqId;
    setReqIdIsSet(true);
    this.reqTime = reqTime;
    setReqTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Command(Command other) {
    __isset_bitfield = other.__isset_bitfield;
    this.type = other.type;
    this.reqId = other.reqId;
    this.reqTime = other.reqTime;
    if (other.isSetGetdir()) {
      this.getdir = new GetdirCmd(other.getdir);
    }
    if (other.isSetAttr()) {
      this.attr = new AttrCmd(other.attr);
    }
    if (other.isSetMknod()) {
      this.mknod = new MknodCmd(other.mknod);
    }
    if (other.isSetMkdir()) {
      this.mkdir = new MkdirCmd(other.mkdir);
    }
    if (other.isSetUnlink()) {
      this.unlink = new UnlinkCmd(other.unlink);
    }
    if (other.isSetRmdir()) {
      this.rmdir = new RmdirCmd(other.rmdir);
    }
    if (other.isSetSymlink()) {
      this.symlink = new SymlinkCmd(other.symlink);
    }
    if (other.isSetRename()) {
      this.rename = new RenameCmd(other.rename);
    }
    if (other.isSetChmod()) {
      this.chmod = new ChmodCmd(other.chmod);
    }
    if (other.isSetChown()) {
      this.chown = new ChownCmd(other.chown);
    }
    if (other.isSetTruncate()) {
      this.truncate = new TruncateCmd(other.truncate);
    }
    if (other.isSetUtime()) {
      this.utime = new UtimeCmd(other.utime);
    }
    if (other.isSetOpen()) {
      this.open = new OpenCmd(other.open);
    }
    if (other.isSetRead()) {
      this.read = new ReadBlocksCmd(other.read);
    }
    if (other.isSetWrite()) {
      this.write = new WriteBlocksCmd(other.write);
    }
    if (other.isSetRelease()) {
      this.release = new ReleaseCmd(other.release);
    }
    if (other.isSetStatfs()) {
      this.statfs = new StatFsCmd(other.statfs);
    }
    if (other.isSetSignal()) {
      this.signal = new Signal(other.signal);
    }
  }

  public Command deepCopy() {
    return new Command(this);
  }

  @Override
  public void clear() {
    setTypeIsSet(false);
    this.type = 0;
    setReqIdIsSet(false);
    this.reqId = 0;
    setReqTimeIsSet(false);
    this.reqTime = 0;
    this.getdir = null;
    this.attr = null;
    this.mknod = null;
    this.mkdir = null;
    this.unlink = null;
    this.rmdir = null;
    this.symlink = null;
    this.rename = null;
    this.chmod = null;
    this.chown = null;
    this.truncate = null;
    this.utime = null;
    this.open = null;
    this.read = null;
    this.write = null;
    this.release = null;
    this.statfs = null;
    this.signal = null;
  }

  public int getType() {
    return this.type;
  }

  public Command setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public long getReqId() {
    return this.reqId;
  }

  public Command setReqId(long reqId) {
    this.reqId = reqId;
    setReqIdIsSet(true);
    return this;
  }

  public void unsetReqId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQID_ISSET_ID);
  }

  /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
  public boolean isSetReqId() {
    return EncodingUtils.testBit(__isset_bitfield, __REQID_ISSET_ID);
  }

  public void setReqIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQID_ISSET_ID, value);
  }

  public int getReqTime() {
    return this.reqTime;
  }

  public Command setReqTime(int reqTime) {
    this.reqTime = reqTime;
    setReqTimeIsSet(true);
    return this;
  }

  public void unsetReqTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQTIME_ISSET_ID);
  }

  /** Returns true if field reqTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReqTime() {
    return EncodingUtils.testBit(__isset_bitfield, __REQTIME_ISSET_ID);
  }

  public void setReqTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQTIME_ISSET_ID, value);
  }

  public GetdirCmd getGetdir() {
    return this.getdir;
  }

  public Command setGetdir(GetdirCmd getdir) {
    this.getdir = getdir;
    return this;
  }

  public void unsetGetdir() {
    this.getdir = null;
  }

  /** Returns true if field getdir is set (has been assigned a value) and false otherwise */
  public boolean isSetGetdir() {
    return this.getdir != null;
  }

  public void setGetdirIsSet(boolean value) {
    if (!value) {
      this.getdir = null;
    }
  }

  public AttrCmd getAttr() {
    return this.attr;
  }

  public Command setAttr(AttrCmd attr) {
    this.attr = attr;
    return this;
  }

  public void unsetAttr() {
    this.attr = null;
  }

  /** Returns true if field attr is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr() {
    return this.attr != null;
  }

  public void setAttrIsSet(boolean value) {
    if (!value) {
      this.attr = null;
    }
  }

  public MknodCmd getMknod() {
    return this.mknod;
  }

  public Command setMknod(MknodCmd mknod) {
    this.mknod = mknod;
    return this;
  }

  public void unsetMknod() {
    this.mknod = null;
  }

  /** Returns true if field mknod is set (has been assigned a value) and false otherwise */
  public boolean isSetMknod() {
    return this.mknod != null;
  }

  public void setMknodIsSet(boolean value) {
    if (!value) {
      this.mknod = null;
    }
  }

  public MkdirCmd getMkdir() {
    return this.mkdir;
  }

  public Command setMkdir(MkdirCmd mkdir) {
    this.mkdir = mkdir;
    return this;
  }

  public void unsetMkdir() {
    this.mkdir = null;
  }

  /** Returns true if field mkdir is set (has been assigned a value) and false otherwise */
  public boolean isSetMkdir() {
    return this.mkdir != null;
  }

  public void setMkdirIsSet(boolean value) {
    if (!value) {
      this.mkdir = null;
    }
  }

  public UnlinkCmd getUnlink() {
    return this.unlink;
  }

  public Command setUnlink(UnlinkCmd unlink) {
    this.unlink = unlink;
    return this;
  }

  public void unsetUnlink() {
    this.unlink = null;
  }

  /** Returns true if field unlink is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlink() {
    return this.unlink != null;
  }

  public void setUnlinkIsSet(boolean value) {
    if (!value) {
      this.unlink = null;
    }
  }

  public RmdirCmd getRmdir() {
    return this.rmdir;
  }

  public Command setRmdir(RmdirCmd rmdir) {
    this.rmdir = rmdir;
    return this;
  }

  public void unsetRmdir() {
    this.rmdir = null;
  }

  /** Returns true if field rmdir is set (has been assigned a value) and false otherwise */
  public boolean isSetRmdir() {
    return this.rmdir != null;
  }

  public void setRmdirIsSet(boolean value) {
    if (!value) {
      this.rmdir = null;
    }
  }

  public SymlinkCmd getSymlink() {
    return this.symlink;
  }

  public Command setSymlink(SymlinkCmd symlink) {
    this.symlink = symlink;
    return this;
  }

  public void unsetSymlink() {
    this.symlink = null;
  }

  /** Returns true if field symlink is set (has been assigned a value) and false otherwise */
  public boolean isSetSymlink() {
    return this.symlink != null;
  }

  public void setSymlinkIsSet(boolean value) {
    if (!value) {
      this.symlink = null;
    }
  }

  public RenameCmd getRename() {
    return this.rename;
  }

  public Command setRename(RenameCmd rename) {
    this.rename = rename;
    return this;
  }

  public void unsetRename() {
    this.rename = null;
  }

  /** Returns true if field rename is set (has been assigned a value) and false otherwise */
  public boolean isSetRename() {
    return this.rename != null;
  }

  public void setRenameIsSet(boolean value) {
    if (!value) {
      this.rename = null;
    }
  }

  public ChmodCmd getChmod() {
    return this.chmod;
  }

  public Command setChmod(ChmodCmd chmod) {
    this.chmod = chmod;
    return this;
  }

  public void unsetChmod() {
    this.chmod = null;
  }

  /** Returns true if field chmod is set (has been assigned a value) and false otherwise */
  public boolean isSetChmod() {
    return this.chmod != null;
  }

  public void setChmodIsSet(boolean value) {
    if (!value) {
      this.chmod = null;
    }
  }

  public ChownCmd getChown() {
    return this.chown;
  }

  public Command setChown(ChownCmd chown) {
    this.chown = chown;
    return this;
  }

  public void unsetChown() {
    this.chown = null;
  }

  /** Returns true if field chown is set (has been assigned a value) and false otherwise */
  public boolean isSetChown() {
    return this.chown != null;
  }

  public void setChownIsSet(boolean value) {
    if (!value) {
      this.chown = null;
    }
  }

  public TruncateCmd getTruncate() {
    return this.truncate;
  }

  public Command setTruncate(TruncateCmd truncate) {
    this.truncate = truncate;
    return this;
  }

  public void unsetTruncate() {
    this.truncate = null;
  }

  /** Returns true if field truncate is set (has been assigned a value) and false otherwise */
  public boolean isSetTruncate() {
    return this.truncate != null;
  }

  public void setTruncateIsSet(boolean value) {
    if (!value) {
      this.truncate = null;
    }
  }

  public UtimeCmd getUtime() {
    return this.utime;
  }

  public Command setUtime(UtimeCmd utime) {
    this.utime = utime;
    return this;
  }

  public void unsetUtime() {
    this.utime = null;
  }

  /** Returns true if field utime is set (has been assigned a value) and false otherwise */
  public boolean isSetUtime() {
    return this.utime != null;
  }

  public void setUtimeIsSet(boolean value) {
    if (!value) {
      this.utime = null;
    }
  }

  public OpenCmd getOpen() {
    return this.open;
  }

  public Command setOpen(OpenCmd open) {
    this.open = open;
    return this;
  }

  public void unsetOpen() {
    this.open = null;
  }

  /** Returns true if field open is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen() {
    return this.open != null;
  }

  public void setOpenIsSet(boolean value) {
    if (!value) {
      this.open = null;
    }
  }

  public ReadBlocksCmd getRead() {
    return this.read;
  }

  public Command setRead(ReadBlocksCmd read) {
    this.read = read;
    return this;
  }

  public void unsetRead() {
    this.read = null;
  }

  /** Returns true if field read is set (has been assigned a value) and false otherwise */
  public boolean isSetRead() {
    return this.read != null;
  }

  public void setReadIsSet(boolean value) {
    if (!value) {
      this.read = null;
    }
  }

  public WriteBlocksCmd getWrite() {
    return this.write;
  }

  public Command setWrite(WriteBlocksCmd write) {
    this.write = write;
    return this;
  }

  public void unsetWrite() {
    this.write = null;
  }

  /** Returns true if field write is set (has been assigned a value) and false otherwise */
  public boolean isSetWrite() {
    return this.write != null;
  }

  public void setWriteIsSet(boolean value) {
    if (!value) {
      this.write = null;
    }
  }

  public ReleaseCmd getRelease() {
    return this.release;
  }

  public Command setRelease(ReleaseCmd release) {
    this.release = release;
    return this;
  }

  public void unsetRelease() {
    this.release = null;
  }

  /** Returns true if field release is set (has been assigned a value) and false otherwise */
  public boolean isSetRelease() {
    return this.release != null;
  }

  public void setReleaseIsSet(boolean value) {
    if (!value) {
      this.release = null;
    }
  }

  public StatFsCmd getStatfs() {
    return this.statfs;
  }

  public Command setStatfs(StatFsCmd statfs) {
    this.statfs = statfs;
    return this;
  }

  public void unsetStatfs() {
    this.statfs = null;
  }

  /** Returns true if field statfs is set (has been assigned a value) and false otherwise */
  public boolean isSetStatfs() {
    return this.statfs != null;
  }

  public void setStatfsIsSet(boolean value) {
    if (!value) {
      this.statfs = null;
    }
  }

  public Signal getSignal() {
    return this.signal;
  }

  public Command setSignal(Signal signal) {
    this.signal = signal;
    return this;
  }

  public void unsetSignal() {
    this.signal = null;
  }

  /** Returns true if field signal is set (has been assigned a value) and false otherwise */
  public boolean isSetSignal() {
    return this.signal != null;
  }

  public void setSignalIsSet(boolean value) {
    if (!value) {
      this.signal = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case REQ_ID:
      if (value == null) {
        unsetReqId();
      } else {
        setReqId((Long)value);
      }
      break;

    case REQ_TIME:
      if (value == null) {
        unsetReqTime();
      } else {
        setReqTime((Integer)value);
      }
      break;

    case GETDIR:
      if (value == null) {
        unsetGetdir();
      } else {
        setGetdir((GetdirCmd)value);
      }
      break;

    case ATTR:
      if (value == null) {
        unsetAttr();
      } else {
        setAttr((AttrCmd)value);
      }
      break;

    case MKNOD:
      if (value == null) {
        unsetMknod();
      } else {
        setMknod((MknodCmd)value);
      }
      break;

    case MKDIR:
      if (value == null) {
        unsetMkdir();
      } else {
        setMkdir((MkdirCmd)value);
      }
      break;

    case UNLINK:
      if (value == null) {
        unsetUnlink();
      } else {
        setUnlink((UnlinkCmd)value);
      }
      break;

    case RMDIR:
      if (value == null) {
        unsetRmdir();
      } else {
        setRmdir((RmdirCmd)value);
      }
      break;

    case SYMLINK:
      if (value == null) {
        unsetSymlink();
      } else {
        setSymlink((SymlinkCmd)value);
      }
      break;

    case RENAME:
      if (value == null) {
        unsetRename();
      } else {
        setRename((RenameCmd)value);
      }
      break;

    case CHMOD:
      if (value == null) {
        unsetChmod();
      } else {
        setChmod((ChmodCmd)value);
      }
      break;

    case CHOWN:
      if (value == null) {
        unsetChown();
      } else {
        setChown((ChownCmd)value);
      }
      break;

    case TRUNCATE:
      if (value == null) {
        unsetTruncate();
      } else {
        setTruncate((TruncateCmd)value);
      }
      break;

    case UTIME:
      if (value == null) {
        unsetUtime();
      } else {
        setUtime((UtimeCmd)value);
      }
      break;

    case OPEN:
      if (value == null) {
        unsetOpen();
      } else {
        setOpen((OpenCmd)value);
      }
      break;

    case READ:
      if (value == null) {
        unsetRead();
      } else {
        setRead((ReadBlocksCmd)value);
      }
      break;

    case WRITE:
      if (value == null) {
        unsetWrite();
      } else {
        setWrite((WriteBlocksCmd)value);
      }
      break;

    case RELEASE:
      if (value == null) {
        unsetRelease();
      } else {
        setRelease((ReleaseCmd)value);
      }
      break;

    case STATFS:
      if (value == null) {
        unsetStatfs();
      } else {
        setStatfs((StatFsCmd)value);
      }
      break;

    case SIGNAL:
      if (value == null) {
        unsetSignal();
      } else {
        setSignal((Signal)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return Integer.valueOf(getType());

    case REQ_ID:
      return Long.valueOf(getReqId());

    case REQ_TIME:
      return Integer.valueOf(getReqTime());

    case GETDIR:
      return getGetdir();

    case ATTR:
      return getAttr();

    case MKNOD:
      return getMknod();

    case MKDIR:
      return getMkdir();

    case UNLINK:
      return getUnlink();

    case RMDIR:
      return getRmdir();

    case SYMLINK:
      return getSymlink();

    case RENAME:
      return getRename();

    case CHMOD:
      return getChmod();

    case CHOWN:
      return getChown();

    case TRUNCATE:
      return getTruncate();

    case UTIME:
      return getUtime();

    case OPEN:
      return getOpen();

    case READ:
      return getRead();

    case WRITE:
      return getWrite();

    case RELEASE:
      return getRelease();

    case STATFS:
      return getStatfs();

    case SIGNAL:
      return getSignal();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case REQ_ID:
      return isSetReqId();
    case REQ_TIME:
      return isSetReqTime();
    case GETDIR:
      return isSetGetdir();
    case ATTR:
      return isSetAttr();
    case MKNOD:
      return isSetMknod();
    case MKDIR:
      return isSetMkdir();
    case UNLINK:
      return isSetUnlink();
    case RMDIR:
      return isSetRmdir();
    case SYMLINK:
      return isSetSymlink();
    case RENAME:
      return isSetRename();
    case CHMOD:
      return isSetChmod();
    case CHOWN:
      return isSetChown();
    case TRUNCATE:
      return isSetTruncate();
    case UTIME:
      return isSetUtime();
    case OPEN:
      return isSetOpen();
    case READ:
      return isSetRead();
    case WRITE:
      return isSetWrite();
    case RELEASE:
      return isSetRelease();
    case STATFS:
      return isSetStatfs();
    case SIGNAL:
      return isSetSignal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Command)
      return this.equals((Command)that);
    return false;
  }

  public boolean equals(Command that) {
    if (that == null)
      return false;

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_reqId = true;
    boolean that_present_reqId = true;
    if (this_present_reqId || that_present_reqId) {
      if (!(this_present_reqId && that_present_reqId))
        return false;
      if (this.reqId != that.reqId)
        return false;
    }

    boolean this_present_reqTime = true;
    boolean that_present_reqTime = true;
    if (this_present_reqTime || that_present_reqTime) {
      if (!(this_present_reqTime && that_present_reqTime))
        return false;
      if (this.reqTime != that.reqTime)
        return false;
    }

    boolean this_present_getdir = true && this.isSetGetdir();
    boolean that_present_getdir = true && that.isSetGetdir();
    if (this_present_getdir || that_present_getdir) {
      if (!(this_present_getdir && that_present_getdir))
        return false;
      if (!this.getdir.equals(that.getdir))
        return false;
    }

    boolean this_present_attr = true && this.isSetAttr();
    boolean that_present_attr = true && that.isSetAttr();
    if (this_present_attr || that_present_attr) {
      if (!(this_present_attr && that_present_attr))
        return false;
      if (!this.attr.equals(that.attr))
        return false;
    }

    boolean this_present_mknod = true && this.isSetMknod();
    boolean that_present_mknod = true && that.isSetMknod();
    if (this_present_mknod || that_present_mknod) {
      if (!(this_present_mknod && that_present_mknod))
        return false;
      if (!this.mknod.equals(that.mknod))
        return false;
    }

    boolean this_present_mkdir = true && this.isSetMkdir();
    boolean that_present_mkdir = true && that.isSetMkdir();
    if (this_present_mkdir || that_present_mkdir) {
      if (!(this_present_mkdir && that_present_mkdir))
        return false;
      if (!this.mkdir.equals(that.mkdir))
        return false;
    }

    boolean this_present_unlink = true && this.isSetUnlink();
    boolean that_present_unlink = true && that.isSetUnlink();
    if (this_present_unlink || that_present_unlink) {
      if (!(this_present_unlink && that_present_unlink))
        return false;
      if (!this.unlink.equals(that.unlink))
        return false;
    }

    boolean this_present_rmdir = true && this.isSetRmdir();
    boolean that_present_rmdir = true && that.isSetRmdir();
    if (this_present_rmdir || that_present_rmdir) {
      if (!(this_present_rmdir && that_present_rmdir))
        return false;
      if (!this.rmdir.equals(that.rmdir))
        return false;
    }

    boolean this_present_symlink = true && this.isSetSymlink();
    boolean that_present_symlink = true && that.isSetSymlink();
    if (this_present_symlink || that_present_symlink) {
      if (!(this_present_symlink && that_present_symlink))
        return false;
      if (!this.symlink.equals(that.symlink))
        return false;
    }

    boolean this_present_rename = true && this.isSetRename();
    boolean that_present_rename = true && that.isSetRename();
    if (this_present_rename || that_present_rename) {
      if (!(this_present_rename && that_present_rename))
        return false;
      if (!this.rename.equals(that.rename))
        return false;
    }

    boolean this_present_chmod = true && this.isSetChmod();
    boolean that_present_chmod = true && that.isSetChmod();
    if (this_present_chmod || that_present_chmod) {
      if (!(this_present_chmod && that_present_chmod))
        return false;
      if (!this.chmod.equals(that.chmod))
        return false;
    }

    boolean this_present_chown = true && this.isSetChown();
    boolean that_present_chown = true && that.isSetChown();
    if (this_present_chown || that_present_chown) {
      if (!(this_present_chown && that_present_chown))
        return false;
      if (!this.chown.equals(that.chown))
        return false;
    }

    boolean this_present_truncate = true && this.isSetTruncate();
    boolean that_present_truncate = true && that.isSetTruncate();
    if (this_present_truncate || that_present_truncate) {
      if (!(this_present_truncate && that_present_truncate))
        return false;
      if (!this.truncate.equals(that.truncate))
        return false;
    }

    boolean this_present_utime = true && this.isSetUtime();
    boolean that_present_utime = true && that.isSetUtime();
    if (this_present_utime || that_present_utime) {
      if (!(this_present_utime && that_present_utime))
        return false;
      if (!this.utime.equals(that.utime))
        return false;
    }

    boolean this_present_open = true && this.isSetOpen();
    boolean that_present_open = true && that.isSetOpen();
    if (this_present_open || that_present_open) {
      if (!(this_present_open && that_present_open))
        return false;
      if (!this.open.equals(that.open))
        return false;
    }

    boolean this_present_read = true && this.isSetRead();
    boolean that_present_read = true && that.isSetRead();
    if (this_present_read || that_present_read) {
      if (!(this_present_read && that_present_read))
        return false;
      if (!this.read.equals(that.read))
        return false;
    }

    boolean this_present_write = true && this.isSetWrite();
    boolean that_present_write = true && that.isSetWrite();
    if (this_present_write || that_present_write) {
      if (!(this_present_write && that_present_write))
        return false;
      if (!this.write.equals(that.write))
        return false;
    }

    boolean this_present_release = true && this.isSetRelease();
    boolean that_present_release = true && that.isSetRelease();
    if (this_present_release || that_present_release) {
      if (!(this_present_release && that_present_release))
        return false;
      if (!this.release.equals(that.release))
        return false;
    }

    boolean this_present_statfs = true && this.isSetStatfs();
    boolean that_present_statfs = true && that.isSetStatfs();
    if (this_present_statfs || that_present_statfs) {
      if (!(this_present_statfs && that_present_statfs))
        return false;
      if (!this.statfs.equals(that.statfs))
        return false;
    }

    boolean this_present_signal = true && this.isSetSignal();
    boolean that_present_signal = true && that.isSetSignal();
    if (this_present_signal || that_present_signal) {
      if (!(this_present_signal && that_present_signal))
        return false;
      if (!this.signal.equals(that.signal))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Command other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReqTime()).compareTo(other.isSetReqTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqTime, other.reqTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGetdir()).compareTo(other.isSetGetdir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetdir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getdir, other.getdir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr()).compareTo(other.isSetAttr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr, other.attr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMknod()).compareTo(other.isSetMknod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMknod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mknod, other.mknod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMkdir()).compareTo(other.isSetMkdir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMkdir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mkdir, other.mkdir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnlink()).compareTo(other.isSetUnlink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlink, other.unlink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRmdir()).compareTo(other.isSetRmdir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRmdir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rmdir, other.rmdir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSymlink()).compareTo(other.isSetSymlink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymlink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symlink, other.symlink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRename()).compareTo(other.isSetRename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rename, other.rename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChmod()).compareTo(other.isSetChmod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChmod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chmod, other.chmod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChown()).compareTo(other.isSetChown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chown, other.chown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTruncate()).compareTo(other.isSetTruncate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTruncate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.truncate, other.truncate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUtime()).compareTo(other.isSetUtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utime, other.utime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpen()).compareTo(other.isSetOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open, other.open);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRead()).compareTo(other.isSetRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read, other.read);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWrite()).compareTo(other.isSetWrite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.write, other.write);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelease()).compareTo(other.isSetRelease());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelease()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.release, other.release);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatfs()).compareTo(other.isSetStatfs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatfs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statfs, other.statfs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignal()).compareTo(other.isSetSignal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signal, other.signal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Command(");
    boolean first = true;

    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reqId:");
    sb.append(this.reqId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reqTime:");
    sb.append(this.reqTime);
    first = false;
    if (isSetGetdir()) {
      if (!first) sb.append(", ");
      sb.append("getdir:");
      if (this.getdir == null) {
        sb.append("null");
      } else {
        sb.append(this.getdir);
      }
      first = false;
    }
    if (isSetAttr()) {
      if (!first) sb.append(", ");
      sb.append("attr:");
      if (this.attr == null) {
        sb.append("null");
      } else {
        sb.append(this.attr);
      }
      first = false;
    }
    if (isSetMknod()) {
      if (!first) sb.append(", ");
      sb.append("mknod:");
      if (this.mknod == null) {
        sb.append("null");
      } else {
        sb.append(this.mknod);
      }
      first = false;
    }
    if (isSetMkdir()) {
      if (!first) sb.append(", ");
      sb.append("mkdir:");
      if (this.mkdir == null) {
        sb.append("null");
      } else {
        sb.append(this.mkdir);
      }
      first = false;
    }
    if (isSetUnlink()) {
      if (!first) sb.append(", ");
      sb.append("unlink:");
      if (this.unlink == null) {
        sb.append("null");
      } else {
        sb.append(this.unlink);
      }
      first = false;
    }
    if (isSetRmdir()) {
      if (!first) sb.append(", ");
      sb.append("rmdir:");
      if (this.rmdir == null) {
        sb.append("null");
      } else {
        sb.append(this.rmdir);
      }
      first = false;
    }
    if (isSetSymlink()) {
      if (!first) sb.append(", ");
      sb.append("symlink:");
      if (this.symlink == null) {
        sb.append("null");
      } else {
        sb.append(this.symlink);
      }
      first = false;
    }
    if (isSetRename()) {
      if (!first) sb.append(", ");
      sb.append("rename:");
      if (this.rename == null) {
        sb.append("null");
      } else {
        sb.append(this.rename);
      }
      first = false;
    }
    if (isSetChmod()) {
      if (!first) sb.append(", ");
      sb.append("chmod:");
      if (this.chmod == null) {
        sb.append("null");
      } else {
        sb.append(this.chmod);
      }
      first = false;
    }
    if (isSetChown()) {
      if (!first) sb.append(", ");
      sb.append("chown:");
      if (this.chown == null) {
        sb.append("null");
      } else {
        sb.append(this.chown);
      }
      first = false;
    }
    if (isSetTruncate()) {
      if (!first) sb.append(", ");
      sb.append("truncate:");
      if (this.truncate == null) {
        sb.append("null");
      } else {
        sb.append(this.truncate);
      }
      first = false;
    }
    if (isSetUtime()) {
      if (!first) sb.append(", ");
      sb.append("utime:");
      if (this.utime == null) {
        sb.append("null");
      } else {
        sb.append(this.utime);
      }
      first = false;
    }
    if (isSetOpen()) {
      if (!first) sb.append(", ");
      sb.append("open:");
      if (this.open == null) {
        sb.append("null");
      } else {
        sb.append(this.open);
      }
      first = false;
    }
    if (isSetRead()) {
      if (!first) sb.append(", ");
      sb.append("read:");
      if (this.read == null) {
        sb.append("null");
      } else {
        sb.append(this.read);
      }
      first = false;
    }
    if (isSetWrite()) {
      if (!first) sb.append(", ");
      sb.append("write:");
      if (this.write == null) {
        sb.append("null");
      } else {
        sb.append(this.write);
      }
      first = false;
    }
    if (isSetRelease()) {
      if (!first) sb.append(", ");
      sb.append("release:");
      if (this.release == null) {
        sb.append("null");
      } else {
        sb.append(this.release);
      }
      first = false;
    }
    if (isSetStatfs()) {
      if (!first) sb.append(", ");
      sb.append("statfs:");
      if (this.statfs == null) {
        sb.append("null");
      } else {
        sb.append(this.statfs);
      }
      first = false;
    }
    if (isSetSignal()) {
      if (!first) sb.append(", ");
      sb.append("signal:");
      if (this.signal == null) {
        sb.append("null");
      } else {
        sb.append(this.signal);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (getdir != null) {
      getdir.validate();
    }
    if (attr != null) {
      attr.validate();
    }
    if (mknod != null) {
      mknod.validate();
    }
    if (mkdir != null) {
      mkdir.validate();
    }
    if (unlink != null) {
      unlink.validate();
    }
    if (rmdir != null) {
      rmdir.validate();
    }
    if (symlink != null) {
      symlink.validate();
    }
    if (rename != null) {
      rename.validate();
    }
    if (chmod != null) {
      chmod.validate();
    }
    if (chown != null) {
      chown.validate();
    }
    if (truncate != null) {
      truncate.validate();
    }
    if (utime != null) {
      utime.validate();
    }
    if (open != null) {
      open.validate();
    }
    if (read != null) {
      read.validate();
    }
    if (write != null) {
      write.validate();
    }
    if (release != null) {
      release.validate();
    }
    if (statfs != null) {
      statfs.validate();
    }
    if (signal != null) {
      signal.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommandStandardSchemeFactory implements SchemeFactory {
    public CommandStandardScheme getScheme() {
      return new CommandStandardScheme();
    }
  }

  private static class CommandStandardScheme extends StandardScheme<Command> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Command struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.reqId = iprot.readI64();
              struct.setReqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQ_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reqTime = iprot.readI32();
              struct.setReqTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GETDIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.getdir = new GetdirCmd();
              struct.getdir.read(iprot);
              struct.setGetdirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ATTR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.attr = new AttrCmd();
              struct.attr.read(iprot);
              struct.setAttrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MKNOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mknod = new MknodCmd();
              struct.mknod.read(iprot);
              struct.setMknodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MKDIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mkdir = new MkdirCmd();
              struct.mkdir.read(iprot);
              struct.setMkdirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UNLINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.unlink = new UnlinkCmd();
              struct.unlink.read(iprot);
              struct.setUnlinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RMDIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rmdir = new RmdirCmd();
              struct.rmdir.read(iprot);
              struct.setRmdirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SYMLINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.symlink = new SymlinkCmd();
              struct.symlink.read(iprot);
              struct.setSymlinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rename = new RenameCmd();
              struct.rename.read(iprot);
              struct.setRenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CHMOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.chmod = new ChmodCmd();
              struct.chmod.read(iprot);
              struct.setChmodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CHOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.chown = new ChownCmd();
              struct.chown.read(iprot);
              struct.setChownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TRUNCATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.truncate = new TruncateCmd();
              struct.truncate.read(iprot);
              struct.setTruncateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.utime = new UtimeCmd();
              struct.utime.read(iprot);
              struct.setUtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.open = new OpenCmd();
              struct.open.read(iprot);
              struct.setOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // READ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.read = new ReadBlocksCmd();
              struct.read.read(iprot);
              struct.setReadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // WRITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.write = new WriteBlocksCmd();
              struct.write.read(iprot);
              struct.setWriteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RELEASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.release = new ReleaseCmd();
              struct.release.read(iprot);
              struct.setReleaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // STATFS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.statfs = new StatFsCmd();
              struct.statfs.read(iprot);
              struct.setStatfsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SIGNAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.signal = new Signal();
              struct.signal.read(iprot);
              struct.setSignalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Command struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
      oprot.writeI64(struct.reqId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQ_TIME_FIELD_DESC);
      oprot.writeI32(struct.reqTime);
      oprot.writeFieldEnd();
      if (struct.getdir != null) {
        if (struct.isSetGetdir()) {
          oprot.writeFieldBegin(GETDIR_FIELD_DESC);
          struct.getdir.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.attr != null) {
        if (struct.isSetAttr()) {
          oprot.writeFieldBegin(ATTR_FIELD_DESC);
          struct.attr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mknod != null) {
        if (struct.isSetMknod()) {
          oprot.writeFieldBegin(MKNOD_FIELD_DESC);
          struct.mknod.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mkdir != null) {
        if (struct.isSetMkdir()) {
          oprot.writeFieldBegin(MKDIR_FIELD_DESC);
          struct.mkdir.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unlink != null) {
        if (struct.isSetUnlink()) {
          oprot.writeFieldBegin(UNLINK_FIELD_DESC);
          struct.unlink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rmdir != null) {
        if (struct.isSetRmdir()) {
          oprot.writeFieldBegin(RMDIR_FIELD_DESC);
          struct.rmdir.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.symlink != null) {
        if (struct.isSetSymlink()) {
          oprot.writeFieldBegin(SYMLINK_FIELD_DESC);
          struct.symlink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rename != null) {
        if (struct.isSetRename()) {
          oprot.writeFieldBegin(RENAME_FIELD_DESC);
          struct.rename.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chmod != null) {
        if (struct.isSetChmod()) {
          oprot.writeFieldBegin(CHMOD_FIELD_DESC);
          struct.chmod.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chown != null) {
        if (struct.isSetChown()) {
          oprot.writeFieldBegin(CHOWN_FIELD_DESC);
          struct.chown.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.truncate != null) {
        if (struct.isSetTruncate()) {
          oprot.writeFieldBegin(TRUNCATE_FIELD_DESC);
          struct.truncate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.utime != null) {
        if (struct.isSetUtime()) {
          oprot.writeFieldBegin(UTIME_FIELD_DESC);
          struct.utime.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.open != null) {
        if (struct.isSetOpen()) {
          oprot.writeFieldBegin(OPEN_FIELD_DESC);
          struct.open.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.read != null) {
        if (struct.isSetRead()) {
          oprot.writeFieldBegin(READ_FIELD_DESC);
          struct.read.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.write != null) {
        if (struct.isSetWrite()) {
          oprot.writeFieldBegin(WRITE_FIELD_DESC);
          struct.write.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.release != null) {
        if (struct.isSetRelease()) {
          oprot.writeFieldBegin(RELEASE_FIELD_DESC);
          struct.release.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.statfs != null) {
        if (struct.isSetStatfs()) {
          oprot.writeFieldBegin(STATFS_FIELD_DESC);
          struct.statfs.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.signal != null) {
        if (struct.isSetSignal()) {
          oprot.writeFieldBegin(SIGNAL_FIELD_DESC);
          struct.signal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommandTupleSchemeFactory implements SchemeFactory {
    public CommandTupleScheme getScheme() {
      return new CommandTupleScheme();
    }
  }

  private static class CommandTupleScheme extends TupleScheme<Command> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Command struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetReqId()) {
        optionals.set(1);
      }
      if (struct.isSetReqTime()) {
        optionals.set(2);
      }
      if (struct.isSetGetdir()) {
        optionals.set(3);
      }
      if (struct.isSetAttr()) {
        optionals.set(4);
      }
      if (struct.isSetMknod()) {
        optionals.set(5);
      }
      if (struct.isSetMkdir()) {
        optionals.set(6);
      }
      if (struct.isSetUnlink()) {
        optionals.set(7);
      }
      if (struct.isSetRmdir()) {
        optionals.set(8);
      }
      if (struct.isSetSymlink()) {
        optionals.set(9);
      }
      if (struct.isSetRename()) {
        optionals.set(10);
      }
      if (struct.isSetChmod()) {
        optionals.set(11);
      }
      if (struct.isSetChown()) {
        optionals.set(12);
      }
      if (struct.isSetTruncate()) {
        optionals.set(13);
      }
      if (struct.isSetUtime()) {
        optionals.set(14);
      }
      if (struct.isSetOpen()) {
        optionals.set(15);
      }
      if (struct.isSetRead()) {
        optionals.set(16);
      }
      if (struct.isSetWrite()) {
        optionals.set(17);
      }
      if (struct.isSetRelease()) {
        optionals.set(18);
      }
      if (struct.isSetStatfs()) {
        optionals.set(19);
      }
      if (struct.isSetSignal()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetReqId()) {
        oprot.writeI64(struct.reqId);
      }
      if (struct.isSetReqTime()) {
        oprot.writeI32(struct.reqTime);
      }
      if (struct.isSetGetdir()) {
        struct.getdir.write(oprot);
      }
      if (struct.isSetAttr()) {
        struct.attr.write(oprot);
      }
      if (struct.isSetMknod()) {
        struct.mknod.write(oprot);
      }
      if (struct.isSetMkdir()) {
        struct.mkdir.write(oprot);
      }
      if (struct.isSetUnlink()) {
        struct.unlink.write(oprot);
      }
      if (struct.isSetRmdir()) {
        struct.rmdir.write(oprot);
      }
      if (struct.isSetSymlink()) {
        struct.symlink.write(oprot);
      }
      if (struct.isSetRename()) {
        struct.rename.write(oprot);
      }
      if (struct.isSetChmod()) {
        struct.chmod.write(oprot);
      }
      if (struct.isSetChown()) {
        struct.chown.write(oprot);
      }
      if (struct.isSetTruncate()) {
        struct.truncate.write(oprot);
      }
      if (struct.isSetUtime()) {
        struct.utime.write(oprot);
      }
      if (struct.isSetOpen()) {
        struct.open.write(oprot);
      }
      if (struct.isSetRead()) {
        struct.read.write(oprot);
      }
      if (struct.isSetWrite()) {
        struct.write.write(oprot);
      }
      if (struct.isSetRelease()) {
        struct.release.write(oprot);
      }
      if (struct.isSetStatfs()) {
        struct.statfs.write(oprot);
      }
      if (struct.isSetSignal()) {
        struct.signal.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Command struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reqId = iprot.readI64();
        struct.setReqIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reqTime = iprot.readI32();
        struct.setReqTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.getdir = new GetdirCmd();
        struct.getdir.read(iprot);
        struct.setGetdirIsSet(true);
      }
      if (incoming.get(4)) {
        struct.attr = new AttrCmd();
        struct.attr.read(iprot);
        struct.setAttrIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mknod = new MknodCmd();
        struct.mknod.read(iprot);
        struct.setMknodIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mkdir = new MkdirCmd();
        struct.mkdir.read(iprot);
        struct.setMkdirIsSet(true);
      }
      if (incoming.get(7)) {
        struct.unlink = new UnlinkCmd();
        struct.unlink.read(iprot);
        struct.setUnlinkIsSet(true);
      }
      if (incoming.get(8)) {
        struct.rmdir = new RmdirCmd();
        struct.rmdir.read(iprot);
        struct.setRmdirIsSet(true);
      }
      if (incoming.get(9)) {
        struct.symlink = new SymlinkCmd();
        struct.symlink.read(iprot);
        struct.setSymlinkIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rename = new RenameCmd();
        struct.rename.read(iprot);
        struct.setRenameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.chmod = new ChmodCmd();
        struct.chmod.read(iprot);
        struct.setChmodIsSet(true);
      }
      if (incoming.get(12)) {
        struct.chown = new ChownCmd();
        struct.chown.read(iprot);
        struct.setChownIsSet(true);
      }
      if (incoming.get(13)) {
        struct.truncate = new TruncateCmd();
        struct.truncate.read(iprot);
        struct.setTruncateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.utime = new UtimeCmd();
        struct.utime.read(iprot);
        struct.setUtimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.open = new OpenCmd();
        struct.open.read(iprot);
        struct.setOpenIsSet(true);
      }
      if (incoming.get(16)) {
        struct.read = new ReadBlocksCmd();
        struct.read.read(iprot);
        struct.setReadIsSet(true);
      }
      if (incoming.get(17)) {
        struct.write = new WriteBlocksCmd();
        struct.write.read(iprot);
        struct.setWriteIsSet(true);
      }
      if (incoming.get(18)) {
        struct.release = new ReleaseCmd();
        struct.release.read(iprot);
        struct.setReleaseIsSet(true);
      }
      if (incoming.get(19)) {
        struct.statfs = new StatFsCmd();
        struct.statfs.read(iprot);
        struct.setStatfsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.signal = new Signal();
        struct.signal.read(iprot);
        struct.setSignalIsSet(true);
      }
    }
  }

}

