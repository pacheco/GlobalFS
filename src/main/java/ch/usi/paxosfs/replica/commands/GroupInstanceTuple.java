/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ch.usi.paxosfs.replica.commands;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class GroupInstanceTuple implements org.apache.thrift.TBase<GroupInstanceTuple, GroupInstanceTuple._Fields>, java.io.Serializable, Cloneable, Comparable<GroupInstanceTuple> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupInstanceTuple");

  private static final org.apache.thrift.protocol.TField PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("partition", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("instance", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GroupInstanceTupleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GroupInstanceTupleTupleSchemeFactory());
  }

  public byte partition; // required
  public long instance; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTITION((short)1, "partition"),
    INSTANCE((short)2, "instance");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITION
          return PARTITION;
        case 2: // INSTANCE
          return INSTANCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARTITION_ISSET_ID = 0;
  private static final int __INSTANCE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION, new org.apache.thrift.meta_data.FieldMetaData("partition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("instance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupInstanceTuple.class, metaDataMap);
  }

  public GroupInstanceTuple() {
  }

  public GroupInstanceTuple(
    byte partition,
    long instance)
  {
    this();
    this.partition = partition;
    setPartitionIsSet(true);
    this.instance = instance;
    setInstanceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroupInstanceTuple(GroupInstanceTuple other) {
    __isset_bitfield = other.__isset_bitfield;
    this.partition = other.partition;
    this.instance = other.instance;
  }

  public GroupInstanceTuple deepCopy() {
    return new GroupInstanceTuple(this);
  }

  @Override
  public void clear() {
    setPartitionIsSet(false);
    this.partition = 0;
    setInstanceIsSet(false);
    this.instance = 0;
  }

  public byte getPartition() {
    return this.partition;
  }

  public GroupInstanceTuple setPartition(byte partition) {
    this.partition = partition;
    setPartitionIsSet(true);
    return this;
  }

  public void unsetPartition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ISSET_ID);
  }

  /** Returns true if field partition is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITION_ISSET_ID);
  }

  public void setPartitionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITION_ISSET_ID, value);
  }

  public long getInstance() {
    return this.instance;
  }

  public GroupInstanceTuple setInstance(long instance) {
    this.instance = instance;
    setInstanceIsSet(true);
    return this;
  }

  public void unsetInstance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTANCE_ISSET_ID);
  }

  /** Returns true if field instance is set (has been assigned a value) and false otherwise */
  public boolean isSetInstance() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTANCE_ISSET_ID);
  }

  public void setInstanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTANCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTITION:
      if (value == null) {
        unsetPartition();
      } else {
        setPartition((Byte)value);
      }
      break;

    case INSTANCE:
      if (value == null) {
        unsetInstance();
      } else {
        setInstance((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITION:
      return Byte.valueOf(getPartition());

    case INSTANCE:
      return Long.valueOf(getInstance());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTITION:
      return isSetPartition();
    case INSTANCE:
      return isSetInstance();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GroupInstanceTuple)
      return this.equals((GroupInstanceTuple)that);
    return false;
  }

  public boolean equals(GroupInstanceTuple that) {
    if (that == null)
      return false;

    boolean this_present_partition = true;
    boolean that_present_partition = true;
    if (this_present_partition || that_present_partition) {
      if (!(this_present_partition && that_present_partition))
        return false;
      if (this.partition != that.partition)
        return false;
    }

    boolean this_present_instance = true;
    boolean that_present_instance = true;
    if (this_present_instance || that_present_instance) {
      if (!(this_present_instance && that_present_instance))
        return false;
      if (this.instance != that.instance)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(GroupInstanceTuple other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartition()).compareTo(other.isSetPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition, other.partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstance()).compareTo(other.isSetInstance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instance, other.instance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GroupInstanceTuple(");
    boolean first = true;

    sb.append("partition:");
    sb.append(this.partition);
    first = false;
    if (!first) sb.append(", ");
    sb.append("instance:");
    sb.append(this.instance);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroupInstanceTupleStandardSchemeFactory implements SchemeFactory {
    public GroupInstanceTupleStandardScheme getScheme() {
      return new GroupInstanceTupleStandardScheme();
    }
  }

  private static class GroupInstanceTupleStandardScheme extends StandardScheme<GroupInstanceTuple> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GroupInstanceTuple struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.partition = iprot.readByte();
              struct.setPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INSTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.instance = iprot.readI64();
              struct.setInstanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GroupInstanceTuple struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PARTITION_FIELD_DESC);
      oprot.writeByte(struct.partition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INSTANCE_FIELD_DESC);
      oprot.writeI64(struct.instance);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroupInstanceTupleTupleSchemeFactory implements SchemeFactory {
    public GroupInstanceTupleTupleScheme getScheme() {
      return new GroupInstanceTupleTupleScheme();
    }
  }

  private static class GroupInstanceTupleTupleScheme extends TupleScheme<GroupInstanceTuple> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GroupInstanceTuple struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPartition()) {
        optionals.set(0);
      }
      if (struct.isSetInstance()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPartition()) {
        oprot.writeByte(struct.partition);
      }
      if (struct.isSetInstance()) {
        oprot.writeI64(struct.instance);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GroupInstanceTuple struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.partition = iprot.readByte();
        struct.setPartitionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.instance = iprot.readI64();
        struct.setInstanceIsSet(true);
      }
    }
  }

}

