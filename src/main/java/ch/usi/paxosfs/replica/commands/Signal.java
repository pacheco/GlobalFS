/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ch.usi.paxosfs.replica.commands;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Signal implements org.apache.thrift.TBase<Signal, Signal._Fields>, java.io.Serializable, Cloneable, Comparable<Signal> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Signal");

  private static final org.apache.thrift.protocol.TField FROM_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("fromPartition", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField RENAME_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("renameData", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SignalStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SignalTupleSchemeFactory());
  }

  public int fromPartition; // required
  public boolean success; // required
  public RenameData renameData; // optional
  public ch.usi.paxosfs.rpc.FSError error; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FROM_PARTITION((short)1, "fromPartition"),
    SUCCESS((short)2, "success"),
    RENAME_DATA((short)3, "renameData"),
    ERROR((short)4, "error");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FROM_PARTITION
          return FROM_PARTITION;
        case 2: // SUCCESS
          return SUCCESS;
        case 3: // RENAME_DATA
          return RENAME_DATA;
        case 4: // ERROR
          return ERROR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FROMPARTITION_ISSET_ID = 0;
  private static final int __SUCCESS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RENAME_DATA,_Fields.ERROR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("fromPartition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RENAME_DATA, new org.apache.thrift.meta_data.FieldMetaData("renameData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RenameData.class)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Signal.class, metaDataMap);
  }

  public Signal() {
  }

  public Signal(
    int fromPartition,
    boolean success)
  {
    this();
    this.fromPartition = fromPartition;
    setFromPartitionIsSet(true);
    this.success = success;
    setSuccessIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Signal(Signal other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fromPartition = other.fromPartition;
    this.success = other.success;
    if (other.isSetRenameData()) {
      this.renameData = new RenameData(other.renameData);
    }
    if (other.isSetError()) {
      this.error = new ch.usi.paxosfs.rpc.FSError(other.error);
    }
  }

  public Signal deepCopy() {
    return new Signal(this);
  }

  @Override
  public void clear() {
    setFromPartitionIsSet(false);
    this.fromPartition = 0;
    setSuccessIsSet(false);
    this.success = false;
    this.renameData = null;
    this.error = null;
  }

  public int getFromPartition() {
    return this.fromPartition;
  }

  public Signal setFromPartition(int fromPartition) {
    this.fromPartition = fromPartition;
    setFromPartitionIsSet(true);
    return this;
  }

  public void unsetFromPartition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMPARTITION_ISSET_ID);
  }

  /** Returns true if field fromPartition is set (has been assigned a value) and false otherwise */
  public boolean isSetFromPartition() {
    return EncodingUtils.testBit(__isset_bitfield, __FROMPARTITION_ISSET_ID);
  }

  public void setFromPartitionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMPARTITION_ISSET_ID, value);
  }

  public boolean isSuccess() {
    return this.success;
  }

  public Signal setSuccess(boolean success) {
    this.success = success;
    setSuccessIsSet(true);
    return this;
  }

  public void unsetSuccess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  /** Returns true if field success is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  public void setSuccessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
  }

  public RenameData getRenameData() {
    return this.renameData;
  }

  public Signal setRenameData(RenameData renameData) {
    this.renameData = renameData;
    return this;
  }

  public void unsetRenameData() {
    this.renameData = null;
  }

  /** Returns true if field renameData is set (has been assigned a value) and false otherwise */
  public boolean isSetRenameData() {
    return this.renameData != null;
  }

  public void setRenameDataIsSet(boolean value) {
    if (!value) {
      this.renameData = null;
    }
  }

  public ch.usi.paxosfs.rpc.FSError getError() {
    return this.error;
  }

  public Signal setError(ch.usi.paxosfs.rpc.FSError error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FROM_PARTITION:
      if (value == null) {
        unsetFromPartition();
      } else {
        setFromPartition((Integer)value);
      }
      break;

    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((Boolean)value);
      }
      break;

    case RENAME_DATA:
      if (value == null) {
        unsetRenameData();
      } else {
        setRenameData((RenameData)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((ch.usi.paxosfs.rpc.FSError)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM_PARTITION:
      return Integer.valueOf(getFromPartition());

    case SUCCESS:
      return Boolean.valueOf(isSuccess());

    case RENAME_DATA:
      return getRenameData();

    case ERROR:
      return getError();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FROM_PARTITION:
      return isSetFromPartition();
    case SUCCESS:
      return isSetSuccess();
    case RENAME_DATA:
      return isSetRenameData();
    case ERROR:
      return isSetError();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Signal)
      return this.equals((Signal)that);
    return false;
  }

  public boolean equals(Signal that) {
    if (that == null)
      return false;

    boolean this_present_fromPartition = true;
    boolean that_present_fromPartition = true;
    if (this_present_fromPartition || that_present_fromPartition) {
      if (!(this_present_fromPartition && that_present_fromPartition))
        return false;
      if (this.fromPartition != that.fromPartition)
        return false;
    }

    boolean this_present_success = true;
    boolean that_present_success = true;
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (this.success != that.success)
        return false;
    }

    boolean this_present_renameData = true && this.isSetRenameData();
    boolean that_present_renameData = true && that.isSetRenameData();
    if (this_present_renameData || that_present_renameData) {
      if (!(this_present_renameData && that_present_renameData))
        return false;
      if (!this.renameData.equals(that.renameData))
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Signal other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFromPartition()).compareTo(other.isSetFromPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromPartition, other.fromPartition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRenameData()).compareTo(other.isSetRenameData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRenameData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.renameData, other.renameData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Signal(");
    boolean first = true;

    sb.append("fromPartition:");
    sb.append(this.fromPartition);
    first = false;
    if (!first) sb.append(", ");
    sb.append("success:");
    sb.append(this.success);
    first = false;
    if (isSetRenameData()) {
      if (!first) sb.append(", ");
      sb.append("renameData:");
      if (this.renameData == null) {
        sb.append("null");
      } else {
        sb.append(this.renameData);
      }
      first = false;
    }
    if (isSetError()) {
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (renameData != null) {
      renameData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SignalStandardSchemeFactory implements SchemeFactory {
    public SignalStandardScheme getScheme() {
      return new SignalStandardScheme();
    }
  }

  private static class SignalStandardScheme extends StandardScheme<Signal> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Signal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FROM_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fromPartition = iprot.readI32();
              struct.setFromPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.success = iprot.readBool();
              struct.setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RENAME_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.renameData = new RenameData();
              struct.renameData.read(iprot);
              struct.setRenameDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.error = new ch.usi.paxosfs.rpc.FSError();
              struct.error.read(iprot);
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Signal struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FROM_PARTITION_FIELD_DESC);
      oprot.writeI32(struct.fromPartition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      oprot.writeBool(struct.success);
      oprot.writeFieldEnd();
      if (struct.renameData != null) {
        if (struct.isSetRenameData()) {
          oprot.writeFieldBegin(RENAME_DATA_FIELD_DESC);
          struct.renameData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.error != null) {
        if (struct.isSetError()) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SignalTupleSchemeFactory implements SchemeFactory {
    public SignalTupleScheme getScheme() {
      return new SignalTupleScheme();
    }
  }

  private static class SignalTupleScheme extends TupleScheme<Signal> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Signal struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFromPartition()) {
        optionals.set(0);
      }
      if (struct.isSetSuccess()) {
        optionals.set(1);
      }
      if (struct.isSetRenameData()) {
        optionals.set(2);
      }
      if (struct.isSetError()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFromPartition()) {
        oprot.writeI32(struct.fromPartition);
      }
      if (struct.isSetSuccess()) {
        oprot.writeBool(struct.success);
      }
      if (struct.isSetRenameData()) {
        struct.renameData.write(oprot);
      }
      if (struct.isSetError()) {
        struct.error.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Signal struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.fromPartition = iprot.readI32();
        struct.setFromPartitionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.success = iprot.readBool();
        struct.setSuccessIsSet(true);
      }
      if (incoming.get(2)) {
        struct.renameData = new RenameData();
        struct.renameData.read(iprot);
        struct.setRenameDataIsSet(true);
      }
      if (incoming.get(3)) {
        struct.error = new ch.usi.paxosfs.rpc.FSError();
        struct.error.read(iprot);
        struct.setErrorIsSet(true);
      }
    }
  }

}

